#!/usr/bin/env perl
use strict;
use warnings;
use Getopt::Long;
use Time::Piece;
use HTML::Entities;
use Bio::Tools::GFF;
use Bio::SeqIO;
use List::Util qw(min max sum);
use FindBin;
use lib "$FindBin::Bin";
require "util.pl";
use File::Copy;
use File::Copy::Recursive qw(dircopy);
use Bio::SeqFeature::Generic;
use Bio::Annotation::Collection;
use Bio::Annotation::Comment;
use Bio::Annotation::SimpleValue;
use Data::Dumper;
use File::Path qw(make_path remove_tree);


my ($gff,$fasta, $depth, $proteomics_in);
my $outdir = ".";
my $bin = "$FindBin::RealBin";
my $templatedir = "$bin/../template";

&GetOptions(
    "g=s" =>\$gff,
    "f=s" =>\$fasta,
    "d=s" =>\$depth,
    "p=s" =>\$proteomics_in,
    "o=s" =>\$outdir
    );

($gff && $fasta && $outdir) ||
    die "Name:\n".
    "  $0 0.1 by Xiaoli Dong <xdong\@ucalgary.ca>\n".
    "Synopsis:\n".
    "  Generate all all type of reports based on the features in the gff file\n".
    "Usage:\n".
    "  perl $0 \n".
    "  -g <input gff file >\n".
    "  -f <fasta format contig file, the features were assocaited with this input file>\n".
    "  -o <output dir>\n".
    "options:\n".
    "  -d <contig coverage depth file in format of:contigid contigLe depth>\n".
    "  -p <protein expession level input file in format of: cds_id cds_desc expression_level>\n";

my $datadir = "$outdir/data";

if (-d $datadir) {
    msg("Re-using existing --outdir $outdir")
}
else {
    msg("Creating new output folder: $outdir");
    runcmd("mkdir -p \Q$outdir\E");
    runcmd("mkdir -p \Q$datadir\E");
}


$depth ||= "";
$proteomics_in ||= "";

msg("start to read $depth file");
#contigName	contigLen	totalAvgDepth

#read in the depth.txt file generated by "jgi_summarize_bam_contig_depths"
my %contig2depth = ();
my %contig2sampleDepth = ();
my @msamples = ();
my @header = ();
my %hindex2msample = ();
open MSAMPLE, ">$datadir/msampleName2shortName.txt" or die "could not open $datadir/msampleName2shortName.txt to write, $!\n";

if(length($depth)){
    open DEPTH, $depth or die "could not open $depth to read, $!\n";

    while (<DEPTH>) {
	chomp;
	next if /^#/;
	#header containing sample name info
	if(/^contigName/){
	    s/\./_/g;
	    @header = split(/\t/, $_);
	    #contigName
	    shift @header;
	    #cnotigLen
	    shift @header;
	    #totalAvgDepth
	    shift @header;
	    my $orgsamples = "";
	    my $sampleCount = 0;
	    for (my $i = 0; $i < @header; $i++){
		next if $header[$i] =~ /-var$/;
		$sampleCount++;
		push(@msamples, "M$sampleCount");
		$orgsamples .= "$header[$i]\t";
		$hindex2msample{$i} = "M$sampleCount";
	    }
	    $orgsamples =~ s/\s+$//;
	    print MSAMPLE "$orgsamples\n";
	    print MSAMPLE join("\t", @msamples), "\n";

	}
	else{
	    my @l = split(/\t/, $_);
	    my $fistCol = shift @l;
	    my ($contigName) = $fistCol =~ /^(\S+)/;
	    my $contigLen = shift @l;
	    my $totalAvgDepth = shift @l;

	    #read in Depth
	    $contig2depth{$contigName} = $totalAvgDepth;
	    #read in coverage information
	    for (my $i = 0; $i < @l; $i++){
		next if $header[$i] =~ /-var$/;
		my $cov = $l[$i];
		$contig2sampleDepth{$contigName}->{$hindex2msample{$i}} = $cov;
	    }
	}
    }
    close(MSAMPLE);
    print STDERR join("\t", @msamples), "\n";
    close(DEPTH);
}

my %cds2plevels= ();
my @psamples = ();
open PSAMPLE, ">$datadir/psampleName2shortName.txt" or die "could not open $datadir/psampleName2shortName.txt to write, $!\n";

if(length($proteomics_in)){
    open PRO, $proteomics_in or die "could not open $proteomics_in to read, $!\n";

    while (<PRO>) {
	chomp;
	s/\s+$//;
	if(/Accession/){
	    @header = split(/\s+/, $_);
	    shift @header;

	    my $sampleCount = 0;
	    for (my $i = 0; $i < @header; $i++){
		$sampleCount++;
		push(@psamples, "P$sampleCount");
	    }
	    print PSAMPLE join("\t", @header), "\n";
	    print PSAMPLE join("\t", @psamples), "\n";
	    next;
	}

	my @l = split(/\s+/, $_);
	my $cdid = shift @l;
	my $total_plevel = sum @l;
	$cds2plevels{$cdid}->{total_plevel} = $total_plevel;

	#read in proteomics abundance
	for (my $i = 0; $i < @l; $i++){
	    $cds2plevels{$cdid}->{$psamples[$i]} = $l[$i];

	}
    }
    close(PRO);
}
close(PSAMPLE);

#print STDERR join("proteomics *************\n", keys %cds2plevels);
my %seqHash = ();

#read in feature.gff file
msg("start to read $gff file");
open my $gff_handle, $gff or die "could not open $gff to read, $!\n";
my $gffio = Bio::Tools::GFF->new(-fh =>$gff_handle, -gff_version => 3);

my %totals = ();

while (my $f = $gffio->next_feature) {
    my $sid = $f->seq_id;
    my $fid = ($f->get_tag_values("ID"))[0];
    if($f->primary_tag eq "CDS"){
	$totals{"CDS"}->{"count"}++;
    }
    elsif($f->primary_tag =~ /^\w+?_?\d+SrRNA/){
	my ($type) = $f->primary_tag =~ /^\S+?_(\d+\w+)/;
	$totals{$type}->{count}++;
    }

    if(scalar (@msamples)){
    	my $fdepth = (exists $contig2depth{$sid}) ? $contig2depth{$sid} : 0;
	$f->add_tag_value("depth", $fdepth);
	my $sampleDepth = (exists $contig2sampleDepth{$sid}) ? $contig2sampleDepth{$sid} : ();
	$f->add_tag_value("sampleDepth", $sampleDepth);

	if($f->primary_tag eq "CDS"){
	    $totals{"CDS"}->{"totalAvgDepth"} += $fdepth;
	    foreach my $msample (@msamples){
		if($sampleDepth->{$msample}){
		    $totals{"CDS"}->{msamples}->{$msample}->{totalAvgDepth} += $sampleDepth->{$msample};
		    $totals{"CDS"}->{msamples}->{$msample}->{"count"}++;
		}
	    }
	}
	elsif($f->primary_tag =~ /^\w+?_?\d+SrRNA/){
	    my ($type) = $f->primary_tag =~ /^\S+?_(\d+\w+)/;
	    $totals{$type}->{totalAvgDepth} += $fdepth;
	    foreach my $msample (@msamples){
		if($sampleDepth->{$msample}){
		    $totals{$type}->{msamples}->{$msample}->{totalAvgDepth} += $sampleDepth->{$msample};
		    $totals{$type}->{msamples}->{$msample}->{count}++;
		}
	    }
	}
    }

    if(scalar (@psamples)){
	my $fplevel = (exists $cds2plevels{$fid}->{total_plevel}) ? $cds2plevels{$fid}->{total_plevel} : 0;
	$f->add_tag_value("plevel", $fplevel);
	my $samplePlevel = (exists $cds2plevels{$fid}) ? $cds2plevels{$fid} : ();
	$f->add_tag_value("samplePlevel", $samplePlevel);
    }
    push (@{$seqHash{$sid}{FEATURE}}, $f);
}
my %gene2pathways = ();

my %cds_aa_seqs = map { $_->id => $_ } $gffio->get_seqs();
close($gff_handle);
msg("end to read $gff file");


msg("start to read $fasta file");
my $fin = Bio::SeqIO->new(-file=>"$fasta", -format=>'fasta');
while (my $seq = $fin->next_seq) {
    $seqHash{$seq->id}{DNA} = $seq;
}
msg("end to read $fasta file");

my $cds_count_total = $totals{"CDS"}->{count};
my $cds_abd_total = exists $totals{"CDS"}->{totalAvgDepth} ? $totals{"CDS"}->{totalAvgDepth} : 0;

msg("Start outputing FOAM report file");
output_foam_reports(\%seqHash, $datadir);
msg("End outputing FOAM report file");

msg("Start outputing metabolic report file");
output_metabolic_reports(\%seqHash, $datadir);
msg("End outputing metabolic report file");

msg("Start outputing gene2ec file");
output_gene2ec(\%seqHash, $datadir);
msg("End outputing gene2ec file");

msg("Start outputing gene2ko file");
output_gene2ko(\%seqHash, $datadir);
msg("End outputing gene2ko file");


output_cds_taxon_summary( \%seqHash, $datadir);
output_rRNA_taxon_summary( \%seqHash, $datadir);
output_cds_annotation(\%seqHash, $datadir);
output_other_element_annotation(\%seqHash, $datadir, "rRNA");
output_other_element_annotation(\%seqHash, $datadir, "tRNA");
output_other_element_annotation(\%seqHash, $datadir, "CRISPR");
output_master_annot_summary(\%seqHash, $datadir);
output_tbl(\%seqHash, $datadir);
output_stats(\%seqHash, $datadir);
output_fasta(\%seqHash, \%cds_aa_seqs, $datadir);
output_htmlreport($templatedir, "$outdir");

sub output_htmlreport{

    my($templatedir, $outdir) = @_;

    remove_tree "$outdir/html" if -d "$outdir/html";
    dircopy("$templatedir/html","$outdir/html", ) or die "Copy $templatedir/html to $outdir/html failed, $!\n";
    dircopy("$templatedir/images","$outdir/images") or die "Copy $templatedir/images to $outdir/images failed, $!\n";
    dircopy("$templatedir/js","$outdir/js") or die "Copy $templatedir/js to $outdir/js failed, $!\n";
    if(length($depth)){
	copy "$templatedir/index_depth.html", "$outdir/index.html"  or die "Copy $templatedir/index_depth.html to $outdir/index.html failed, $!\n";
    }
    else{
	copy "$templatedir/index.html", "$outdir"  or die "Copy $templatedir/index.html to $outdir/index.html failed, $!\n";
    }

    copy "$templatedir/style.css", "$outdir" or die "Copy $templatedir/style.css to $outdir/style.css failed, $!\n";
}



sub output_metabolic_reports{

    my ($seqHash, $datadir) = @_;
    my %process2genes = ();

    for my $sid (sort {$seqHash{$b}{DNA}->length <=> $seqHash{$a}{DNA}->length} keys %$seqHash){
	next if not exists $seqHash->{$sid}{FEATURE};
	for my $f ( sort { $a->start <=> $b->start } @{ $seqHash->{$sid}{FEATURE} }) {
	    next if $f->primary_tag ne "CDS";
	    my $geneid = ($f->get_tag_values("ID"))[0];
	    my $totalAvgDepth = ($f->has_tag("depth")) ? ($f->get_tag_values("depth"))[0] : 0;
	    my $sampleDepth = ($f->has_tag("sampleDepth")) ? ($f->get_tag_values("sampleDepth"))[0] : ();
	    my $p_express_level = ($f->has_tag("samplePlevel")) ? ($f->get_tag_values("samplePlevel"))[0] : ();
	    my @processes = $f->has_tag("metabolic_process") ? $f->get_tag_values("metabolic_process") : ("compound:UNKNOWN;process:UNKNOWN;gene:UNKNOWN;");
	    foreach my $process (@processes){
		my ($compound, $proc, $genename) = $process =~ /^compound:(\S+.*?);process:(\S+.*?);gene:(\S.*?);$/;

		push(@{$process2genes{$compound}->{$proc}->{$genename}->{genes}}, $geneid);
		$process2genes{$compound}->{$proc}->{$genename}->{totalAvgDepth} += $totalAvgDepth if $totalAvgDepth > 0;

		foreach my $msample (@msamples){
		    if($sampleDepth->{$msample}){
			$process2genes{$compound}->{$proc}->{$genename}->{msamples}->{$msample}->{totalAvgDepth} += $sampleDepth->{$msample};
		    }
		}

		foreach my $psample (@psamples){
		    if($p_express_level->{$psample}){
			$process2genes{$compound}->{$proc}->{$genename}->{psamples}->{$psample}->{total_plevel}  += $p_express_level->{$psample};
		    }
		}

	    }
	}
    }

    msg("Writing to $datadir/cds.metabolic.summary.tab.txt");
    open my $tab_fh, '>', "$datadir/cds.metabolic.summary.tab.txt";
    my @header = ("Compound;process;gene", "count", "count_pct");

    if(@msamples){
	push(@header,"abundance");
	push(@header,"abundance_pct");

	foreach my $msample (@msamples){
	    push(@header,"depth_$msample");
	    push(@header,"depth_pct_$msample");

	}
    }
    if(@psamples){
	foreach my $psample (@psamples){
	    push(@header,"plevel_pct_$psample");
	}
    }

    print $tab_fh "#", join("\t", @header), "\n";

    #print (Dumper(%process2genes));
    msg("Writing to $datadir/cds.metabolic.datatable.json");
    open my $datatable_fh, '>', "$datadir/cds.metabolic.datatable.json";
    my $datatable_jsonstr .= "data = [\n";
    my $c_compound = 0;
    my $total_compound = keys %process2genes;
    my $total_sum = 0;
    my $cds_count_total = $totals{"CDS"}->{count};

    foreach my $compound (keys %process2genes){

	$c_compound++;
	my $compound_sum = 0;


	foreach my $proc (sort keys %{$process2genes{$compound}}){


	    my $proc_sum = 0;
	    foreach my $gname (keys %{$process2genes{$compound}->{$proc}}){
		#print (Dumper(%process2genes));

		my $geneCount = exists $process2genes{$compound}->{$proc}->{$gname}->{genes} ? @{$process2genes{$compound}->{$proc}->{$gname}->{genes}} : 0;
		#print STDERR "****geneCount=$geneCount, genename=$gname,";
		#exists $process2genes{$compound}->{$proc}->{$gname}->{genes} ? print STDERR join(";", @{$process2genes{$compound}->{$proc}->{$gname}->{genes}}) : print STDERR "empty";
		#print STDERR "\n";
		my $count_percent = sprintf("%.2f", $geneCount*100/$cds_count_total);

		my @cols = ($geneCount, $count_percent);
		$compound =~ s/^"//;
		$compound =~ s/"$//;
		$proc =~ s/^"//;
		$proc =~ s/"$//;
		$gname =~ s/^"//;
		$gname =~ s/"$//;


		$proc_sum += $geneCount;

		$datatable_jsonstr .= (' ' x 2) . "{\n";
		$datatable_jsonstr .=  (' ' x 2) . "\"Compound\": \"$compound\",\n";
		$datatable_jsonstr .=  (' ' x 2) . "\"Process\": \"$proc\",\n";
		$datatable_jsonstr .=  (' ' x 2) . "\"Gene\": \"$gname\",\n";

		$datatable_jsonstr .=  (' ' x 2) . "\"Count\": $geneCount,\n";
		$datatable_jsonstr .=  (' ' x 2) . "\"Count_pct\": $count_percent,\n";

		if(scalar (@msamples)){
		    my $total_cds_abd = exists $totals{"CDS"}->{totalAvgDepth} ? $totals{"CDS"}->{totalAvgDepth} : 0;
		    my $abd = exists $process2genes{$compound}->{$proc}->{$gname}->{totalAvgDepth} ? sprintf("%.2f",$process2genes{$compound}->{$proc}->{$gname}->{totalAvgDepth}) : 0;
		    my $abd_pct = $total_cds_abd != 0 ? sprintf("%.2f", $abd*100/$total_cds_abd): 0;
		    $datatable_jsonstr .=  (' ' x 2) . "\"Abundance\": $abd,\n";
		    $datatable_jsonstr .=  (' ' x 2) . "\"Abundance_pct\": $abd_pct,\n";
		    push(@cols, $abd);
		    push(@cols, $abd_pct);
		}

		foreach my $msample (@msamples){
		    my $sample_total_cds_abd = exists $totals{"CDS"}->{msamples}->{$msample}->{totalAvgDepth} ? $totals{"CDS"}->{msamples}->{$msample}->{totalAvgDepth} : 0;
		    my $sampleAbd = exists $process2genes{$compound}->{$proc}->{$gname}->{msamples}->{$msample}->{totalAvgDepth} ? sprintf("%.2f",$process2genes{$compound}->{$proc}->{$gname}->{msamples}->{$msample}->{totalAvgDepth}) : 0;
		    my $sampleAbd_percent = $sample_total_cds_abd != 0 ? sprintf("%.2f", $sampleAbd*100/$sample_total_cds_abd) : 0;
		    $datatable_jsonstr .=  (' ' x 2) . "\"depth_$msample\": $sampleAbd,\n";
		    $datatable_jsonstr .=  (' ' x 2) . "\"depth_pct_$msample\": $sampleAbd_percent,\n";
		    push(@cols, $sampleAbd);
		    push(@cols, $sampleAbd_percent);
		}
		foreach my $psample (@psamples){
		    my $plevel = exists $process2genes{$compound}->{$proc}->{$gname}->{psamples}->{$psample}->{total_plevel} ? sprintf("%.4f", $process2genes{$compound}->{$proc}->{$gname}->{psamples}->{$psample}->{total_plevel}) : 0;
		    $datatable_jsonstr .=  (' ' x 2) . "\"plevel_$psample\": $plevel,\n";

		    push(@cols, $plevel);
		}

		$datatable_jsonstr =~ s/,$//;
		$datatable_jsonstr .=  (' ' x 2) . "},\n";
		$compound_sum += $proc_sum;

		print $tab_fh "\"$compound\";";
		print $tab_fh "\"$proc\";" if $proc ne "UNKNOWN";
		print $tab_fh "\"$gname\";" if $gname ne "UNKNOWN";
		print $tab_fh "\t";
		print $tab_fh join("\t", @cols), "\n";

	    }

	}

	$total_sum += $compound_sum;


    }
    $datatable_jsonstr =~ s/,$//;
    $datatable_jsonstr .= (' ' x 1) . "]\n";

    print $datatable_fh qq($datatable_jsonstr);

    close($datatable_fh);
    close($tab_fh);

    output_metabolic_treecol("$datadir/cds.metabolic.treecol.json");
    output_metabolic_tablecol("$datadir/cds.metabolic.tablecol.json");


    my $cmd = "$^X $bin/output_tree_json.pl -i $datadir/cds.metabolic.summary.tab.txt -t Metabolic -l 1  > $datadir/cds.metabolic.tree.json";
    msg("******start running $cmd\n");
    runcmd("$cmd");
    msg("******Finish running $cmd \n\n");


    $cmd = "$^X $bin/output_sunburst_json.pl -i $datadir/cds.metabolic.summary.tab.txt -t Metabolic -p $datadir/cds.metabolic.sunburst;";
    if(length($depth)){
	$cmd .= "$^X $bin/output_sunburst_json.abund.pl -i $datadir/cds.metabolic.summary.tab.txt -t Metabolic -p $datadir/cds.metabolic.sunburst";
    }
    msg("******start running $cmd\n");
    runcmd("$cmd");
    msg("******Finish running $cmd \n\n");


}
sub output_metabolic_treecol{

    my ($outFile) = @_;
    msg("Writing to $outFile");
    open (TREECOL,">$outFile") or die "Could not open $outFile to write, $!\n";

     my %treecol = ();
    $treecol{"count"} = "Count";
    $treecol{"count_pct"} = "Count%";
    my @colkeys = ("count","count_pct");

    if(scalar (@msamples)){
	$treecol{"abundance"} = "A";
	$treecol{"abundance_pct"} = "A%";
	push(@colkeys, "abundance");
	push(@colkeys, "abundance_pct");
    }

    push(@colkeys, map{"depth_pct_$_"} @msamples);

    foreach my $msample (@msamples){
	$treecol{"depth_pct_$msample"} = "$msample%";
    }
    push(@colkeys, map{"plevel_pct_$_"} @psamples);

    foreach my $psample (@psamples){
	$treecol{"plevel_pct_$psample"} = "$psample%";
    }
    print TREECOL "treecol = [\n";
    print TREECOL "{\nheader: \"Environmental important metabolic gene distribution\"\n},\n";
    my $size = @colkeys;
    my $i = 0;
    for (; $i < $size; $i++){
	my $key = $colkeys[$i];
	if($i == $size -1){
	    print TREECOL "{value: \"$key\", header: \"$treecol{$key}\", width: \"50px\"}\n" if exists $treecol{$key};
	}
	else{
	    print TREECOL "{value: \"$key\", header: \"$treecol{$key}\"},\n" if exists $treecol{$key};
	}

    }

    print TREECOL "];\n";
    close(TREECOL);


}

sub output_metabolic_tablecol{

    my ($outFile) = @_;
    msg("Writing to $outFile");
    open my $tablecol_fh, '>', "$outFile";
    print $tablecol_fh "tablecol = [\n";
    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"Compound\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"Compound\"\n";
    print $tablecol_fh "},\n";

    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"Process\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"Process\"\n";
    print $tablecol_fh "},\n";

    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"Gene\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"Gene\"\n";
    print $tablecol_fh "},\n";

    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"Count\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"Count\"\n";
    print $tablecol_fh "},\n";

    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"Count%\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"Count_pct\"\n";

    if(@msamples || @psamples){
	print $tablecol_fh "},\n";
	if(@msamples){

	    print $tablecol_fh "{\n";
	    print $tablecol_fh (' ' x 2), "\"title\": \"A\",\n";
	    print $tablecol_fh (' ' x 2), "\"data\": \"Abundance\"\n";
	    print $tablecol_fh "},\n";

	    print $tablecol_fh "{\n";
	    print $tablecol_fh (' ' x 2), "\"title\": \"A%\",\n";
	    print $tablecol_fh (' ' x 2), "\"data\": \"Abundance_pct\"\n";
	    print $tablecol_fh "},\n";

	    for my $i (0 .. $#msamples){
		print $tablecol_fh "{\n";
		print $tablecol_fh (' ' x 2),"\"title\": \"$msamples[$i]%\",\n";
		print $tablecol_fh (' ' x 2),"\"data\": \"depth_pct\_$msamples[$i]\"\n";

		if($i < $#msamples){
                    print $tablecol_fh "},\n";
                }

	    }
	}


	if(@psamples){
	    print $tablecol_fh "},\n";

	    my $c = 0;
	    foreach (@psamples){
		print $tablecol_fh "{\n";
		print $tablecol_fh (' ' x 2),"\"title\": \"$_%\",\n";
		print $tablecol_fh (' ' x 2),"\"data\": \"plevel\_$_\"\n";

		if($c == @psamples -1){
		    print $tablecol_fh "}\n";
		}
		else{
		    print $tablecol_fh "},\n";
		}
		$c++;
	}
	}
    }
    else{
	print $tablecol_fh "}\n";
    }
    print $tablecol_fh "];\n";
    close($tablecol_fh)

}


sub output_foam_reports{
    my ($seqHash, $datadir) = @_;
    my %ontology2genes = ();
    for my $sid (sort {$seqHash{$b}{DNA}->length <=> $seqHash{$a}{DNA}->length} keys %$seqHash){
	next if not exists $seqHash->{$sid}{FEATURE};
	for my $f ( sort { $a->start <=> $b->start } @{ $seqHash->{$sid}{FEATURE} }) {
	    next if $f->primary_tag ne "CDS";
            my $geneid = ($f->get_tag_values("ID"))[0];
	    my $totalAvgDepth = ($f->has_tag("depth")) ? ($f->get_tag_values("depth"))[0] : 0;
	    my $sampleDepth = ($f->has_tag("sampleDepth")) ? ($f->get_tag_values("sampleDepth"))[0] : ();
	    my $p_express_level = ($f->has_tag("samplePlevel")) ? ($f->get_tag_values("samplePlevel"))[0] : ();
	    my @ontologies = $f->has_tag("allko_ontology") ? $f->get_tag_values("allko_ontology") : ("L1:UNKNOWN;L2:UNKNOWN;L3:UNKNOWN;L4:UNKNOWN");
	    foreach my $ontology (@ontologies){
		my ($l1, $l2, $l3, $l4) = $ontology =~ /L1:(\S.*?);L2:(.*?);L3:(.*?);L4:(.*)/;
		$l1 ||= "UNKNOWN";
		$l2 ||= "UNKNOWN";
		$l3 ||= "UNKNOWN";
		$l4 ||= "UNKNOWN";
		push(@{$ontology2genes{$l1}->{$l2}->{$l3}->{$l4}->{genes}}, $geneid);
		$ontology2genes{$l1}->{$l2}->{$l3}->{$l4}->{totalAvgDepth} += $totalAvgDepth if $totalAvgDepth > 0;

		foreach my $msample (@msamples){
		    if($sampleDepth->{$msample}){
			$ontology2genes{$l1}->{$l2}->{$l3}->{$l4}->{msamples}->{$msample}->{totalAvgDepth} += $sampleDepth->{$msample};
		    }
		}
		foreach my $psample (@psamples){
		    if($p_express_level->{$psample}){
			$ontology2genes{$l1}->{$l2}->{$l3}->{$l4}->{psamples}->{$psample}->{total_plevel}  += $p_express_level->{$psample};
		    }
		}

	    }
	}
    }

    msg("Writing to $datadir/cds.foam.summary.tab.txt file");
    open my $tab_fh, '>', "$datadir/cds.foam.summary.tab.txt";

    my @header = ("Ontology", "count", "count_pct");
    if(@msamples){
	push(@header,"abundance");
	push(@header,"abundance_pct");
	foreach my $msample (@msamples){
	    push(@header,"depth_$msample");
	    push(@header,"depth_pct_$msample");
	}
    }
    if(@psamples){
	foreach my $psample (@psamples){
	    push(@header,"plevel_pct_$psample");
	}
    }
    print $tab_fh "#", join("\t", @header), "\n";


    msg("Writing to $datadir/cds.foam.datatable.json");
    open my $datatable_fh, '>', "$datadir/cds.foam.datatable.json";

    my $datatable_jsonstr .= "data = [\n";
    my $cds_count_total = $totals{"CDS"}->{count};

    foreach my $l1 (keys %ontology2genes){

	foreach my $l2 (keys %{$ontology2genes{$l1}}){
	    foreach my $l3 (keys %{$ontology2genes{$l1}->{$l2}}){
		foreach my $l4 (keys %{$ontology2genes{$l1}->{$l2}->{$l3}}){


		    my $geneCount = exists $ontology2genes{$l1}->{$l2}->{$l3}->{$l4}->{genes} ? @{$ontology2genes{$l1}->{$l2}->{$l3}->{$l4}->{genes}} : 0;
		    my $count_percent = sprintf("%.2f", $geneCount*100/$cds_count_total);
		    my @cols = ($geneCount, $count_percent);
		    $datatable_jsonstr .= (' ' x 2) . "{\n";
		    $datatable_jsonstr .=  (' ' x 2) . "\"L1\": \"$l1\",\n";
		    $datatable_jsonstr .=  $l2 ne "UNKNOWN" ? (' ' x 2) . "\"L2\": \"$l2\",\n" : (' ' x 2) . "\"L2\": \"\",\n";
		    $datatable_jsonstr .=  $l3 ne "UNKNOWN" ? (' ' x 2) . "\"L3\": \"$l3\",\n" : (' ' x 2) . "\"L3\": \"\",\n";
		    $datatable_jsonstr .=  $l4 ne "UNKNOWN" ? (' ' x 2) . "\"L4\": \"$l4\",\n" : (' ' x 2) . "\"L4\": \"\",\n";
		    $datatable_jsonstr .=  (' ' x 2) . "\"Count\": $geneCount,\n";
		    $datatable_jsonstr .=  (' ' x 2) . "\"Count_pct\": $count_percent,\n";

		    if(scalar (@msamples)){
			#my $cds_abd_total = exists $totals{"CDS"}->{totalAvgDepth} ? $totals{"CDS"}->{totalAvgDepth} : 0;
			my $abd =  exists $ontology2genes{$l1}->{$l2}->{$l3}->{$l4}->{totalAvgDepth} ? sprintf("%.2f",$ontology2genes{$l1}->{$l2}->{$l3}->{$l4}->{totalAvgDepth}) : 0;
			my $abd_pct = $cds_abd_total != 0 ? sprintf("%.2f", $abd*100/$cds_abd_total): 0;

			$datatable_jsonstr .=  (' ' x 2) . "\"Abundance\": $abd,\n";
			$datatable_jsonstr .=  (' ' x 2) . "\"Abundance_pct\": $abd_pct,\n";
			push(@cols, $abd);
			push(@cols, $abd_pct);
		    }

		    foreach my $msample (@msamples){

			my $msample_cds_total_abd = exists $totals{"CDS"}->{msamples}->{$msample}->{totalAvgDepth} ? $totals{"CDS"}->{msamples}->{$msample}->{totalAvgDepth} : 0;
			my $sampleAbd = exists $ontology2genes{$l1}->{$l2}->{$l3}->{$l4}->{msamples}->{$msample}->{totalAvgDepth} ? sprintf("%.2f",$ontology2genes{$l1}->{$l2}->{$l3}->{$l4}->{msamples}->{$msample}->{totalAvgDepth}) : 0;
			my $sampleAbd_percent = $msample_cds_total_abd != 0 ? sprintf("%.2f", $sampleAbd*100/$msample_cds_total_abd) : 0;

			push(@cols, $sampleAbd);
			push(@cols, $sampleAbd_percent);
			$datatable_jsonstr .=  (' ' x 2) . "\"depth_$msample\": $sampleAbd,\n";
			$datatable_jsonstr .=  (' ' x 2) . "\"depth_pct_$msample\": $sampleAbd_percent,\n";
		    }
		    foreach my $psample (@psamples){
			my $plevel = exists $ontology2genes{$l1}->{$l2}->{$l3}->{$l4}->{psamples}->{$psample}->{total_plevel} ? sprintf("%.2f",$ontology2genes{$l1}->{$l2}->{$l3}->{$l4}->{psamples}->{$psample}->{total_plevel}) : 0;
			$datatable_jsonstr .=  (' ' x 2) . "\"plevel_$psample\": $plevel,\n";
			push(@cols, $plevel);

		    }

		    $datatable_jsonstr =~ s/,$//;
		    $datatable_jsonstr .=  (' ' x 2) . "},\n";

		    print $tab_fh "\"$l1\";";
		    print $tab_fh "\"$l2\";" if $l2 ne "UNKNOWN";
		    print $tab_fh "\"$l3\";" if $l3 ne "UNKNOWN";
		    print $tab_fh "\"$l4\";" if $l4 ne "UNKNOWN";
		    print $tab_fh "\t";
		    print $tab_fh join("\t", @cols), "\n";


		}
	    }
	}

    }
    $datatable_jsonstr .= (' ' x 1) . "]\n";
    print $datatable_fh $datatable_jsonstr;

    close($datatable_fh);
    close($tab_fh);


    output_foam_treecol("$datadir/cds.foam.treecol.json");
    output_foam_tablecol("$datadir/cds.foam.tablecol.json");

    my $cmd = "$^X $bin/output_tree_json.pl -i $datadir/cds.foam.summary.tab.txt -t Functional_Ontology_assignments_for_Metagenomes -l 1 > $datadir/cds.foam.tree.json";
    msg("******start running $cmd\n");
    runcmd("$cmd");
    msg("******Finish running $cmd \n\n");


    $cmd = "$^X $bin/output_sunburst_json.pl -i $datadir/cds.foam.summary.tab.txt -t FOAM -p $datadir/cds.foam.sunburst;";
    if(length($depth)){
	$cmd .= "$^X $bin/output_sunburst_json.abund.pl -i $datadir/cds.foam.summary.tab.txt -t FOAM -p $datadir/cds.foam.sunburst";
    }
    msg("******start running $cmd\n");
    runcmd("$cmd");
    msg("******Finish running $cmd \n\n");


}
sub output_foam_treecol{

    my ($outFile) = @_;
    msg("Writing to $outFile");
    open (TREECOL,">$outFile") or die "Could not open $outFile to write, $!\n";

    my %treecol = ();
    $treecol{"count"} = "Count";
    $treecol{"count_pct"} = "Count%";
    my @colkeys = ("count","count_pct");

    if(scalar (@msamples)){
	$treecol{"abundance"} = "A";
	$treecol{"abundance_pct"} = "A%";
	push(@colkeys, "abundance");
	push(@colkeys, "abundance_pct");
    }

    push(@colkeys, map{"depth_pct_$_"} @msamples);

    foreach my $msample (@msamples){
	$treecol{"depth_pct_$msample"} = "$msample%";
    }
    push(@colkeys, map{"plevel_pct_$_"} @psamples);

    foreach my $psample (@psamples){
	$treecol{"plevel_pct_$psample"} = "$psample%";
    }

    print TREECOL "treecol = [\n";
    print TREECOL "{\nheader: \"FOAM Database Annotation Distribution\"\n},\n";
    my $size = @colkeys;
    my $i = 0;
    for (; $i < $size; $i++){
	my $key = $colkeys[$i];
	if($i == $size -1){
	    print TREECOL "{value: \"$key\", header: \"$treecol{$key}\", width: \"50px\"}\n" if exists $treecol{$key};
	}
	else{
	    print TREECOL "{value: \"$key\", header: \"$treecol{$key}\"},\n" if exists $treecol{$key};
	}

    }

    print TREECOL "];\n";
    close(TREECOL);

}
sub output_foam_tablecol{

    my ($outFile) = @_;
    msg("Writing to $outFile");
    open my $tablecol_fh, '>', "$outFile";
    print $tablecol_fh "tablecol = [\n";
    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"L1\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"L1\"\n";
    print $tablecol_fh "},\n";

    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"L2\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"L2\"\n";
    print $tablecol_fh "},\n";

    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"L3\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"L3\"\n";
    print $tablecol_fh "},\n";

    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"L4\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"L4\"\n";
    print $tablecol_fh "},\n";

    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"Count\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"Count\"\n";
    print $tablecol_fh "},\n";

    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"Count%\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"Count_pct\"\n";

    if(@msamples || @psamples){
	print $tablecol_fh "},\n";
	if(@msamples){
	    #print $tablecol_fh "{\n";
	    #print $tablecol_fh (' ' x 2), "\"title\": \"A\",\n";
	    #print $tablecol_fh (' ' x 2), "\"data\": \"Abundance\"\n";
	    #print $tablecol_fh "},\n";
	    print $tablecol_fh "{\n";
	    print $tablecol_fh (' ' x 2), "\"title\": \"A%\",\n";
	    print $tablecol_fh (' ' x 2), "\"data\": \"Abundance_pct\"\n";
	    print $tablecol_fh "},\n";

	    for my $i (0 .. $#msamples){
		print $tablecol_fh "{\n";
		print $tablecol_fh (' ' x 2),"\"title\": \"$msamples[$i]%\",\n";
		print $tablecol_fh (' ' x 2),"\"data\": \"depth_pct\_$msamples[$i]\"\n";
		print $tablecol_fh "},\n";
	    }
	}
	if(@psamples){

	    my $c = 0;
	    foreach (@psamples){
		print $tablecol_fh "{\n";
		print $tablecol_fh (' ' x 2),"\"title\": \"$_%\",\n";
		print $tablecol_fh (' ' x 2),"\"data\": \"plevel\_$_\"\n";

		if($c == @psamples -1){
		    print $tablecol_fh "}\n";
		}
		else{
		    print $tablecol_fh "},\n";
		}
		$c++;
	    }
	}
    }
    else{
	print $tablecol_fh "}\n";
    }
    print $tablecol_fh "];\n";
    close($tablecol_fh);



}


sub output_gene2ko{
    my ($seqHash,$datadir) = @_;

    msg("Writing to $datadir/gene2ko.txt");
    open my $ko_fh, '>', "$datadir/cds.gene2ko.txt";
    my %ko2genes = ();
    my %msample_handles = ();


    foreach (@msamples) {
	my $filename = "$datadir/cds.gene2ko.$_.txt";
	open $msample_handles{$_}, '>', $filename or next;

    }

    my %handles = ();
    my %filenames = ();
    my %ko2plevel = ();

    foreach (@psamples) {
	my $filename = "$datadir/cds.gene2ko.plevel.$_.txt";
	open $handles{$_}, '>', $filename or next;
	$filenames{$_} = $filename;
    }

    for my $sid (sort {$seqHash{$b}{DNA}->length <=> $seqHash{$a}{DNA}->length} keys %$seqHash){
	next if not exists $seqHash->{$sid}{FEATURE};
        for my $f ( sort { $a->start <=> $b->start } @{ $seqHash->{$sid}{FEATURE} }) {
	    next if $f->primary_tag ne "CDS";
            my $geneid = ($f->get_tag_values("ID"))[0];

            if($f->has_tag("allko_ids")){
		my @kos = $f->get_tag_values("allko_ids");
		foreach my $ko (@kos){
		    print $ko_fh "$geneid\t$ko\n";
		    $ko2genes{$ko}->{genes}->{$geneid} = 0;
		    if(scalar (@msamples)){
			my $totalAvgDepth = ($f->has_tag("depth")) ? ($f->get_tag_values("depth"))[0] : 0;
			my $sampleDepth = ($f->has_tag("sampleDepth")) ? ($f->get_tag_values("sampleDepth"))[0] : ();
			$ko2genes{$ko}->{genes}->{$geneid} = $totalAvgDepth;
			foreach my $msample (@msamples){
			    if(exists $sampleDepth->{$msample} && $sampleDepth->{$msample} > 0){
				print  {$msample_handles{$msample}} "$geneid\t$ko\n";
				$ko2genes{$ko}->{msamples}->{$msample}->{genes}->{$geneid} = $sampleDepth->{$msample};
			    }


			}
		    }
		    if(scalar (@psamples)){
			my $totalPlevel = ($f->has_tag("plevel")) ? ($f->get_tag_values("plevel"))[0] : 0;
			my $samplePlevel = ($f->has_tag("samplePlevel")) ? ($f->get_tag_values("samplePlevel"))[0] : ();
			$ko2plevel{$ko}->{genes}->{$geneid} = $totalPlevel;



			foreach my $psample (@psamples){
			    if(exists $samplePlevel->{$psample} && $samplePlevel->{$psample} > 0){
				print  {$handles{$psample}} "$geneid\t$ko\n";
				$ko2plevel{$ko}->{psamples}->{$psample}->{genes}->{$geneid} = $samplePlevel->{$psample};
			    }

			}

		    }

		}
            }
	}
    }
    close($ko_fh);
    foreach  (values %msample_handles){
	close($_);
    }

    foreach  (values %handles){
	close($_);
    }

    get_kegg_pathway_table("$datadir/cds.gene2ko",\%ko2genes, \%ko2plevel);

}
sub get_kegg_pathway_table{

    my ($prefix, $ko2genes, $ko2plevel) = @_;

    #https://www.genome.jp/kegg-bin/show_pathway?ko00010+K00845+K01810
    #color pathway using KO number
    my $cmd = "MinPath.py -ko $prefix.txt -report $prefix.minpath -details $prefix.minpath.details > /dev/null 2>&1;";
    msg("******start running minpath $cmd\n");
    runcmd("$cmd");

    open(INPUT, "$prefix.minpath.details") or die "Could not find $prefix.minpath.details to read\n";
    my %pathways = ();
    my $pid = "";
    $/= "\npath";
    while (<INPUT>) {
	my $fams = "";
	my @items = split(/\n/, $_);
	my $geneCount = 0;
	foreach my $item (@items){
	    $item =~ s/^\s+//;
	    if($item =~ /(\d+)\s+fam0\s+(\d+)\s+fam-found\s+(\d+)\s+\#\s+(\S.*?)$/){
		$pid = $1;
		$pathways{$pid}->{fam0} = $2;
		$pathways{$pid}->{fam_found} = $3;
		$pathways{$pid}->{name} = $4;
	    }
	    elsif($item =~ /^(\S+)\s+hits/){
		my $ko = $1;
		$fams .= $fams eq "" ? "$ko" : "+$ko";
		#one gene can belong to multiple ko, if a gene involved in multiple module of a pathway, only count the abundace once.
		for my $geneid (keys %{$ko2genes->{$ko}->{genes}}){
		    #my $name = $pathways{$pid}->{name};
		    #$name =~ s/\s+/_/g;
		    $gene2pathways{$geneid}->{KEGG}->{"ko$pid"} = 1;
		    $pathways{$pid}->{mgenes}->{$geneid} = $ko2genes->{$ko}->{genes}->{$geneid} if exists $ko2genes->{$ko}->{genes}->{$geneid};

		}
	    }
	}
	$pathways{$pid}->{fams} = $fams if $fams ne "";
	$pathways{$pid}->{totalAvgDepth} = sum (values %{$pathways{$pid}->{mgenes}});
    }
    close(INPUT);
    #$/= "\n";

    if(-e "$prefix.plevel.txt" && -s "$prefix.plevel.txt"){

	$cmd = "MinPath.py -ko $prefix.plevel.txt -report $prefix.plevel.minpath -details $prefix.plevel.minpath.details > /dev/null 2>&1;";
	msg("******start running minpath $cmd\n");
	runcmd("$cmd");
	msg("******Finish running minpath $cmd \n\n");

	open (INPUT, "$prefix.plevel.minpath.details") or die "Could not find $prefix.plevel.minpath.details to read\n";
	while (<INPUT>) {
	    my $fams = "";
	    my @items = split(/\n/, $_);
	    foreach my $item (@items){
		$item =~ s/^\s+//;
		if($item =~ /(\d+)\s+fam0\s+(\d+)\s+fam-found\s+(\d+)\s+\#\s+(\S.*?)$/){
		    $pid = $1;
		    $pathways{$pid}->{fam0} = $2 if not exists $pathways{$pid}->{fam0};
		    $pathways{$pid}->{p_all}->{fam_found} = $3;
		    $pathways{$pid}->{name} = $4 if not exists $pathways{$pid}->{name};
		}
		elsif($item =~ /^(\S+)\s+hits/){
		     $fams .= $fams eq "" ? "$1" : "+$1";
		     for my $geneid (keys %{$ko2plevel->{$1}->{genes}}){
			 $pathways{$pid}->{pgenes}->{$geneid} = $ko2plevel->{$1}->{genes}->{$geneid} if exists $ko2plevel->{$1}->{genes}->{$geneid};
		     }

		}
	    }

	    $pathways{$pid}->{p_all}->{fams} = $fams if $fams ne "";
	    $pathways{$pid}->{p_all}->{plevel} = sum (values %{$pathways{$pid}->{pgenes}});
	}
	close(INPUT);
	$/= "\n";

    }

    #generate separate output for each metagenomic  sample
    foreach my $msample (@msamples){
	my $cmd = "MinPath.py -ko $prefix.$msample.txt -report $prefix.$msample.minpath -details $prefix.$msample.minpath.details > /dev/null 2>&1;";
	msg("******start running minpath $cmd\n");
	runcmd("$cmd");
	msg("******Finish running minpath $cmd \n\n");
	open (INPUT, "$prefix.$msample.minpath.details") or die "Could not find $prefix.$msample.minpath.details to read\n";
	$/= "\npath";
	while (<INPUT>) {
	    my $fams = "";
	    my @items = split(/\n/, $_);
	    foreach my $item (@items){
		$item =~ s/^\s+//;
		if($item =~ /(\d+)\s+fam0\s+(\d+)\s+fam-found\s+(\d+)\s+\#\s+(\S.*?)$/){
		    $pid = $1;
		    $pathways{$pid}->{fam0} = $2 if not exists $pathways{$pid}->{fam0};
		    $pathways{$pid}->{msamples}->{$msample}->{fam_found} = $3;
		    $pathways{$pid}->{name} = $4 if not exists $pathways{$pid}->{name};
		}
		elsif($item =~ /^(\S+)\s+hits/){
		    $fams .= $fams eq "" ? "$1" : "+$1";
		    for my $geneid (keys %{$ko2genes->{$1}->{msamples}->{$msample}->{genes}}){
			$pathways{$pid}->{msamples}->{$msample}->{genes}->{$geneid} = $ko2genes->{$1}->{msamples}->{$msample}->{genes}->{$geneid} if exists $ko2genes->{$1}->{msamples}->{$msample}->{genes}->{$geneid};
		    }

		}
	    }
	    $pathways{$pid}->{msamples}->{$msample}->{fams} = $fams if $fams ne "";
	    $pathways{$pid}->{msamples}->{$msample}->{totalAvgDepth} = sum (values %{$pathways{$pid}->{msamples}->{$msample}->{genes}});

	}
	close(INPUT);
    }

    #generate separate output for each proteomics sample
    foreach my $psample (@psamples){
	my $cmd = "MinPath.py -ko $prefix.plevel.$psample.txt -report $prefix.plevel.$psample.minpath -details $prefix.plevel.$psample.minpath.details > /dev/null 2>&1;";
	msg("******start running minpath $cmd\n");
	runcmd("$cmd");
	msg("******Finish running minpath $cmd \n\n");
	open (INPUT, "$prefix.plevel.$psample.minpath.details") or die "Could not find $prefix.plevel.$psample.minpath.details to read\n";
	$/= "\npath";
	while (<INPUT>) {
	    my $fams = "";
	    my @items = split(/\n/, $_);
	    foreach my $item (@items){
		$item =~ s/^\s+//;
		if($item =~ /(\d+)\s+fam0\s+(\d+)\s+fam-found\s+(\d+)\s+\#\s+(\S.*?)$/){
		    $pid = $1;
		    #$show_pathway .= "$pid";
		    $pathways{$pid}->{fam0} = $2 if not exists $pathways{$pid}->{fam0};
		    $pathways{$pid}->{psamples}->{$psample}->{fam_found} = $3;
		    $pathways{$pid}->{name} = $4 if not exists $pathways{$pid}->{name};
		}
		elsif($item =~ /^(\S+)\s+hits/){
		    $fams .= $fams eq "" ? "$1" : "+$1";
		    for my $geneid (keys %{$ko2plevel->{$1}->{psamples}->{$psample}->{genes}}){
			$pathways{$pid}->{psamples}->{$psample}->{genes}->{$geneid} = $ko2plevel->{$1}->{psamples}->{$psample}->{genes}->{$geneid} if exists $ko2plevel->{$1}->{psamples}->{$psample}->{genes}->{$geneid};
		    }
		}
	    }
	    $pathways{$pid}->{psamples}->{$psample}->{fams} = $fams if $fams ne "";
	    $pathways{$pid}->{psamples}->{$psample}->{plevel} = sum (values %{$pathways{$pid}->{psamples}->{$psample}->{genes}});

	}
	close(INPUT);
    }

    open (TABLE, ">$prefix.minpath.datatable.json") or die "Could not open  $prefix.minpath.datatable.json to write\n";
    my $str = "";
    print TABLE "data = [\n";
    foreach my $pid (sort {$a <=> $b} keys %pathways){
	$str .= (' ' x 2) . "{\n";
	my $name = exists $pathways{$pid}->{name} ? $pathways{$pid}->{name} : "";
	$str .= (' ' x 2) . "\"name\": \"$name\",\n";
	$str .= (' ' x 2) . "\"pid\": \"$pid\",\n";
	$str .= (' ' x 2) . "\"fam0\": \"$pathways{$pid}->{fam0}\",\n" if exists $pathways{$pid}->{fam0};
	$str .= exists $pathways{$pid}->{fams} ? (' ' x 2) . "\"fams\": \"$pathways{$pid}->{fams}\",\n" : "\"fams\":\"\",\n";
	my $fam_found = exists $pathways{$pid}->{fam_found} ? $pathways{$pid}->{fam_found} : 0;
	$str .= (' ' x 2) . "\"fam_found\": \"$fam_found\",\n";


	my $geneCount = keys %{$pathways{$pid}->{mgenes}};
	my $count_percent = sprintf("%.2f", $geneCount*100/$cds_count_total);

	$str .=  (' ' x 2) . "\"Count\": $geneCount,\n";
	$str .=  (' ' x 2) . "\"Count_pct\": $count_percent,\n";

	if(scalar(@msamples)){

	    my $abd = exists  $pathways{$pid}->{totalAvgDepth} ? sprintf("%0.2f", $pathways{$pid}->{totalAvgDepth}) : 0;
	    my $abd_pct = $cds_abd_total != 0 ? sprintf("%0.2f", 100 * $abd/$cds_abd_total) : 0;
	    $str .= (' ' x 2) . "\"Abundance\": \"$abd\",\n";
	    $str .= (' ' x 2) . "\"Abundance_pct\": \"$abd_pct\",\n";

	    foreach my $msample (@msamples){

		my $fams_ms = exists $pathways{$pid}->{msamples}->{$msample}->{fams} ? $pathways{$pid}->{msample}->{$msample}->{fams} : "";
		$str .=  exists $pathways{$pid}->{msamples}->{$msample}->{fams} ? (' ' x 2) . "\"fams\_$msample\": \"$pathways{$pid}->{msamples}->{$msample}->{fams}\",\n" : "\"fams\_$msample\":\"\",\n";

		my $fam_found_ms = exists $pathways{$pid}->{msamples}->{$msample}->{fam_found} ? $pathways{$pid}->{msamples}->{$msample}->{fam_found} : 0;
		$str .=  (' ' x 2) . "\"fam_found\_$msample\": \"$fam_found_ms\",\n";

		my $msample_cds_count = $totals{"CDS"}->{msamples}->{$msample}->{count};

		my $count = keys %{$pathways{$pid}->{msamples}->{$msample}->{genes}};
		my $count_pct = sprintf("%.2f", $geneCount*100/$msample_cds_count);
		$str .=  (' ' x 2) . "\"Count\_$msample\": \"$count\",\n";
		$str .=  (' ' x 2) . "\"Count_pct\_$msample\": \"$count_pct\",\n";


		my $msample_cds_totalAvgDepth = $totals{"CDS"}->{msamples}->{$msample}->{totalAvgDepth};
		my $abd = exists $pathways{$pid}->{msamples}->{$msample}->{totalAvgDepth} ? sprintf("%0.2f",$pathways{$pid}->{msamples}->{$msample}->{totalAvgDepth}) : 0;
		my $abd_pct = $msample_cds_totalAvgDepth != 0 ? sprintf("%0.2f",100*$abd/$msample_cds_totalAvgDepth) : 0;
		$str .=  (' ' x 2) . "\"depth\_$msample\": \"$abd\",\n";
		$str .=  (' ' x 2) . "\"depth_pct\_$msample\": \"$abd_pct\",\n";
	    }
	}

	if(scalar(@psamples)){

	    my $p_fams = exists $pathways{$pid}->{p_all}->{fams} ? $pathways{$pid}->{p_all}->{fams} : "";
	    $str .= (' ' x 2) . "\"p_fams\": \"$p_fams\",\n";
	    my $p_fam_found = exists $pathways{$pid}->{p_all}->{fam_found} ? $pathways{$pid}->{p_all}->{fam_found} : 0;
	    $str .= (' ' x 2) . "\"p_fam_found\": \"$p_fam_found\",\n";

	    my $cds_count_total = $totals{"CDS"}->{count};
	    my $geneCount = keys %{$pathways{$pid}->{pgenes}};
	    my $count_percent = sprintf("%.2f", $geneCount*100/$cds_count_total);

	    $str .=  (' ' x 2) . "\"p_genecount\": $geneCount,\n";
	    $str .=  (' ' x 2) . "\"p_genecount_pct\": $count_percent,\n";


	    foreach my $psample (@psamples){

		my $s_fams = exists $pathways{$pid}->{psamples}->{$psample}->{fams} ? $pathways{$pid}->{psamples}->{$psample}->{fams} : "";
		$str .=  (' ' x 2) . "\"p_fams_$psample\": \"$s_fams\",\n";

		my $s_fam_found = exists $pathways{$pid}->{psamples}->{$psample}->{fam_found} ? $pathways{$pid}->{psamples}->{$psample}->{fam_found} : 0;
		$str .=  (' ' x 2) . "\"p_fam_found_$psample\": \"$s_fam_found\",\n";

		my $count = keys %{$pathways{$pid}->{psamples}->{$psample}->{genes}};

		$str .=  (' ' x 2) . "\"p_genecount\_$psample\": \"$count\",\n";

		my $fam_p_expressed = exists $pathways{$pid}->{psamples}->{$psample}->{plevel} ? sprintf("%0.2f",$pathways{$pid}->{psamples}->{$psample}->{plevel}) : 0;
		$str .=  (' ' x 2) . "\"p\_$psample\": \"$fam_p_expressed\",\n";
	    }
	}
	$str .=(' ' x 2) . "},\n";
    }

    $str =~ s/,$//;

    print TABLE $str;
    print TABLE "]\n";
    close(TABLE);
    output_kegg_tablecols("$prefix.minpath.tablecol.json");
}
sub output_kegg_tablecols{
    my ($outFile) = @_;
    msg("Writing to $outFile");
    open my $tablecol_fh, '>', "$outFile";
    print $tablecol_fh "tablecol = [\n";
    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"Pathway Entry\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"pid\",\n";
    print $tablecol_fh (' ' x 2), "\"render\": function(data,type,full,meta){\n";
    print $tablecol_fh (' ' x 4), "pid = \'ko\' + full.pid;\n";
    print $tablecol_fh (' ' x 4), "return \'<a href=\"https://www.genome.jp/dbget-bin/www_bget?pathway+\' + pid + \'\">\' + pid + \'</a>\';\n";
    print $tablecol_fh (' ' x 2), "}\n";
    print $tablecol_fh "},\n";
    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"Name\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"name\"\n";
    print $tablecol_fh "},\n";
    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"fam0\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"fam0\"\n";
    print $tablecol_fh "},\n";
    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"MTFF\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"fam_found\",\n";
    print $tablecol_fh (' ' x 2), "\"render\": function(data,type,full,meta){\n";
    print $tablecol_fh (' ' x 4), "pid = \'ko\' + full.pid;\n";
    print $tablecol_fh (' ' x 4), "fams = full.fams;\n";
    print $tablecol_fh (' ' x 4),"if(data > 0){\n";
    print $tablecol_fh (' ' x 6), "return \'<a href=\"https://www.genome.jp/kegg-bin/show_pathway?\' + pid + \'+\' + fams + \'\">\' + data + \'</a>\';\n";
    print $tablecol_fh (' ' x 4),"}\n";
    print $tablecol_fh (' ' x 4),"else{\n";
    print $tablecol_fh (' ' x 6),"return data;\n";
    print $tablecol_fh (' ' x 4),"}\n";
    print $tablecol_fh (' ' x 2),"}\n";
    print $tablecol_fh "},\n";
    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"Count\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"Count\"\n";
    print $tablecol_fh "},\n";
    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"Count%\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"Count_pct\"\n";
    #print $tablecol_fh "},\n";

    if(@msamples || @psamples){
	print $tablecol_fh "},\n";
	if(@msamples){
	    print $tablecol_fh "{\n";
	    print $tablecol_fh (' ' x 2), "\"title\": \"A\",\n";
	    print $tablecol_fh (' ' x 2), "\"data\": \"Abundance\"\n";
	    print $tablecol_fh "},\n";

	    print $tablecol_fh "{\n";
	    print $tablecol_fh (' ' x 2), "\"title\": \"A%\",\n";
	    print $tablecol_fh (' ' x 2), "\"data\": \"Abundance_pct\"\n";
	    print $tablecol_fh "},\n";

	     for my $i (0 .. $#msamples){
		#print $tablecol_fh "{\n";
		#print $tablecol_fh (' ' x 2), "\"title\": \"TFF$_\",\n";
		#print $tablecol_fh (' ' x 2), "\"data\": \"fam_found\_$_\",\n";
		#print $tablecol_fh (' ' x 2),"\"render\": function(data,type,full,meta){\n";
		#print $tablecol_fh (' ' x 4),"pid = \'ko\' + full.pid;\n";
		#print $tablecol_fh (' ' x 4), "fams = full.fams\_$_;\n";
		#print $tablecol_fh (' ' x 4),"if(data > 0){\n";
		#print $tablecol_fh (' ' x 6),"return \'<a href=\"https://www.genome.jp/kegg-bin/show_pathway?\' + pid + \'+\' + fams + \'\">\' + data + \'</a>\';\n";
		#print $tablecol_fh (' ' x 4),"}\n";
		#print $tablecol_fh (' ' x 4),"else{\n";
		#print $tablecol_fh (' ' x 6),"return data;\n";
		#print $tablecol_fh (' ' x 4),"}\n";
		#print $tablecol_fh "}\n";
		#print $tablecol_fh "},\n";

		#print $tablecol_fh "{\n";
		#print $tablecol_fh (' ' x 2),"\"title\": \"count\_$_\",\n";
		#print $tablecol_fh (' ' x 2),"\"data\": \"count\_$_\"\n";
		#print $tablecol_fh (' ' x 2),"},\n";

		#print $tablecol_fh "{\n";
		#print $tablecol_fh (' ' x 2), "\"title\": \"$_\",\n";
		#print $tablecol_fh (' ' x 2), "\"data\": \"depth\_$_\"\n";
		#print $tablecol_fh "},\n";


		print $tablecol_fh "{\n";
		print $tablecol_fh (' ' x 2),"\"title\": \"$msamples[$i]%\",\n";
		print $tablecol_fh (' ' x 2),"\"data\": \"depth_pct\_$msamples[$i]\",\n";
		print $tablecol_fh (' ' x 2),"\"render\": function(data,type,full,meta){\n";
		print $tablecol_fh (' ' x 4),"fam_found = full.fam_found\_$msamples[$i];\n";

		print $tablecol_fh (' ' x 4),"pid = \'ko\' + full.pid;\n";
		print $tablecol_fh (' ' x 4), "fams = full.fams\_$msamples[$i];\n";
		print $tablecol_fh (' ' x 4),"if(data > 0){\n";
		print $tablecol_fh (' ' x 6),"return \'<a href=\"https://www.genome.jp/kegg-bin/show_pathway?\' + pid + \'+\' + fams + \'\">\' + data + \'</a>\';\n";
		print $tablecol_fh (' ' x 4),"}\n";
		print $tablecol_fh (' ' x 4),"else{\n";
		print $tablecol_fh (' ' x 6),"return data;\n";
		print $tablecol_fh (' ' x 4),"}\n";
		print $tablecol_fh "}\n";

		if($i < $#msamples){
		    print $tablecol_fh "},\n";
		}

	    }
	}

	if(@psamples){
	    print $tablecol_fh "},\n";
	    print $tablecol_fh "{\n";
	    print $tablecol_fh (' ' x 2), "\"title\": \"PTFF\",\n";
	    print $tablecol_fh (' ' x 2), "\"data\": \"p_fam_found\",\n";

	    print $tablecol_fh (' ' x 2),"\"render\": function(data,type,full,meta){\n";
	    print $tablecol_fh (' ' x 4),"pid = \'ko\' + full.pid;\n";
	    print $tablecol_fh (' ' x 4), "p_fams = full.p_fams;\n";
	    print $tablecol_fh (' ' x 4),"if(data > 0){\n";
	    print $tablecol_fh (' ' x 6),"return \'<a href=\"https://www.genome.jp/kegg-bin/show_pathway?\' + pid + \'+\' + p_fams + \'\">\' + data + \'</a>\';\n";
		print $tablecol_fh (' ' x 4),"}\n";
	    print $tablecol_fh (' ' x 4),"else{\n";
	    print $tablecol_fh (' ' x 6),"return data;\n";
	    print $tablecol_fh (' ' x 4),"}\n";
	    print $tablecol_fh (' ' x 2),"}\n";

	    print $tablecol_fh "},\n";

	    foreach my $i (0 .. $#psamples){
		print $tablecol_fh "{\n";
		print $tablecol_fh (' ' x 2),"\"title\": \"$psamples[$i]%\",\n";
		print $tablecol_fh (' ' x 2),"\"data\": \"p_$psamples[$i]\",\n";
		print $tablecol_fh (' ' x 2),"\"render\": function(data,type,full,meta){\n";
		print $tablecol_fh (' ' x 4),"pid = \'ko\' + full.pid;\n";
		print $tablecol_fh (' ' x 4), "p_fams = full.p_fams\_$psamples[$i];\n";
		print $tablecol_fh (' ' x 4),"if(data > 0){\n";
		print $tablecol_fh (' ' x 6),"return \'<a href=\"https://www.genome.jp/kegg-bin/show_pathway?\' + pid + \'+\' + p_fams + \'\">\' + data + \'</a>\';\n";
		print $tablecol_fh (' ' x 4),"}\n";
		print $tablecol_fh (' ' x 4),"else{\n";
		print $tablecol_fh (' ' x 6),"return data;\n";
		print $tablecol_fh (' ' x 4),"}\n";
		print $tablecol_fh (' ' x 2),"}\n";

		if($i < $#psamples){
		    print $tablecol_fh "},\n";
		}
	    }
	}
	print $tablecol_fh "}\n";
    }
    else{
	print $tablecol_fh "}\n";
    }
    print $tablecol_fh "];\n";
    close($tablecol_fh);
}

sub output_gene2ec{
    my ($seqHash,$datadir) = @_;
    msg("Writing to $datadir/cds.gene2ec.txt");
    open my $ec_fh, '>', "$datadir/cds.gene2ec.txt";

    my %ec2genes = ();
    my %msample_handles = ();


    foreach (@msamples) {
	my $filename = "$datadir/cds.gene2ec.$_.txt";
	open $msample_handles{$_}, '>', $filename or next;

    }


    my %ec2plevel = ();
    my %handles = ();

    foreach (@psamples) {
	my $filename = "$datadir/cds.gene2ec.plevel.$_.txt";
	open $handles{$_}, '>', $filename or next;
    }


    for my $sid (sort {$seqHash{$b}{DNA}->length <=> $seqHash{$a}{DNA}->length} keys %$seqHash){
	next if not exists $seqHash->{$sid}{FEATURE};
	for my $f ( sort { $a->start <=> $b->start } @{ $seqHash->{$sid}{FEATURE} }) {
	    next if $f->primary_tag ne "CDS";
            my $geneid = ($f->get_tag_values("ID"))[0];



            if($f->has_tag("allec_ids")){
                my @ecs = $f->get_tag_values("allec_ids");
                foreach my $ec (@ecs){
		    $ec2genes{$ec}->{genes}->{$geneid} = 0;
		    #push(@{$ec2genes{$ec}->{genes}}, $geneid);
		    #$ec2genes{$ec}->{totalAvgDepth} += $totalAvgDepth;
		    print $ec_fh "$geneid\t$ec\n";
		    if(scalar (@msamples)){
			my $totalAvgDepth = ($f->has_tag("depth")) ? ($f->get_tag_values("depth"))[0] : 0;
			my $sampleDepth = ($f->has_tag("sampleDepth")) ? ($f->get_tag_values("sampleDepth"))[0] : ();
			$ec2genes{$ec}->{genes}->{$geneid} = $totalAvgDepth;
			foreach my $msample (@msamples){
			    if(exists $sampleDepth->{$msample} && $sampleDepth->{$msample} > 0){
				print  {$msample_handles{$msample}} "$geneid\t$ec\n";
				$ec2genes{$ec}->{msamples}->{$msample}->{genes}->{$geneid} = $sampleDepth->{$msample};
			    }
			}
		    }
		    if(scalar (@psamples)){
			my $totalPlevel = ($f->has_tag("plevel")) ? ($f->get_tag_values("plevel"))[0] : 0;
			my $samplePlevel = ($f->has_tag("samplePlevel")) ? ($f->get_tag_values("samplePlevel"))[0] : ();
			$ec2plevel{$ec}->{genes}->{$geneid} = $totalPlevel;

			foreach my $psample (@psamples){

			    if(exists $samplePlevel->{$psample} && $samplePlevel->{$psample} > 0){
				print  {$handles{$psample}} "$geneid\t$ec\n";
				$ec2plevel{$ec}->{psamples}->{$psample}->{genes}->{$geneid} = $samplePlevel->{$psample};
			    }
			}
		    }
                }

            }
        }
    }
    close($ec_fh);
    foreach  (values %msample_handles){
	close($_);
    }

    foreach  (values %handles){
	close($_);
    }

    metacyc_pathway_table("$datadir/cds.gene2ec",\%ec2genes, \%ec2plevel);
    #output_metacyc_tablecols_new("$datadir/cds.gene2ec.minpath.tablecol.json", \@msamples);

}
sub metacyc_pathway_table{

    my ($prefix,$ec2genes, $ec2plevel) = @_;

    open (DAT, "$bin/../txt/MetaCyc_pathways_id2name.tab.txt") or die "Could not find $bin/../txt/MetaCyc_pathways_id2name.tab.txt file to read\n";

    #UNIQUE-ID	TYPES	COMMON-NAME
    my %pid2info = ();
    while (<DAT>) {
	chomp;
	#print STDERR $_;
	next if /^#/;
	next if $_ !~ m/\S/;
	my @line = split(/\t/, $_);

	$pid2info{$line[0]}->{"TYPES"} = ($line[1]);
	$pid2info{$line[0]}->{"COMMON-NAME"} = ($line[2]);

    }
    close(DAT);


    my $cmd = "MinPath.py -any $prefix.txt -map ec2path -report $prefix.minpath -details $prefix.minpath.details > /dev/null 2>&1;";
    msg("******start running minpath $cmd\n");
    runcmd("$cmd");
    msg("******Finish running minpath $cmd \n\n");

    open (INPUT, "$prefix.minpath.details") or die "Could not find $prefix.minpath.details to read\n";
    my %pathways = ();
    my $pid = "";
    $/= "\npath";
    while (<INPUT>) {
	my $fams = "";
	my @items = split(/\n/, $_);

	foreach my $item (@items){
	    $item =~ s/^\s+//;
	    if($item =~ /(\d+)\s+fam0\s+(\d+)\s+fam-found\s+(\d+)\s+\#\s+(\S.*?)$/){
		$pid = $1;
		$pathways{$pid}->{fam0} = $2;
		$pathways{$pid}->{m_all}->{fam_found} = $3;
		$pathways{$pid}->{name} = $4;
	    }
	    elsif($item =~ /^(\S+)\s+hits/){
		my $ec = $1;
		$fams .= $fams eq "" ? "$ec" : "+$ec";

                #one gene can belong to multiple ko, if a gene involved in multiple module of a pathway, only count the abundace once.
		for my $geneid (keys %{$ec2genes->{$ec}->{genes}}){
		    my $name = $pathways{$pid}->{name};
		    $name =~ s/\s+/_/g;
		    $gene2pathways{$geneid}->{metacyc}->{$name} = 1;
		    $pathways{$pid}->{mgenes}->{$geneid} = $ec2genes->{$ec}->{genes}->{$geneid} if exists $ec2genes->{$ec}->{genes}->{$geneid};
		}


	    }
	}

	$pathways{$pid}->{fams} = $fams if $fams ne "";
	$pathways{$pid}->{totalAvgDepth} = sum (values %{$pathways{$pid}->{mgenes}});

    }
    close(INPUT);


    if(-e "$prefix.plevel.txt" && -s "$prefix.plevel.txt"){

	$cmd = "MinPath.py -any $prefix.plevel.txt -map ec2path -report $prefix.plevel.minpath -details $prefix.plevel.minpath.details > /dev/null 2>&1;";
	msg("******start running minpath $cmd\n");
	runcmd("$cmd");
	msg("******Finish running minpath $cmd \n\n");

	open (INPUT, "$prefix.plevel.minpath.details") or die "Could not find $prefix.plevel.minpath.details to read\n";
	while (<INPUT>) {
	    my $fams = "";
	    my @items = split(/\n/, $_);

	    foreach my $item (@items){
		$item =~ s/^\s+//;
		if($item =~ /(\d+)\s+fam0\s+(\d+)\s+fam-found\s+(\d+)\s+\#\s+(\S.*?)$/){
		    $pid = $1;
		    #$show_pathway .= "$pid";
		    $pathways{$pid}->{fam0} = $2 if not exists $pathways{$pid}->{fam0};
		    $pathways{$pid}->{p_all}->{fam_found} = $3;
		    $pathways{$pid}->{name} = $4 if not exists $pathways{$pid}->{name};
		}
		elsif($item =~ /^(\S+)\s+hits/){
		    $fams .= $fams eq "" ? "$1" : "+$1";
		    for my $geneid (keys %{$ec2plevel->{$1}->{genes}}){
			$pathways{$pid}->{pgenes}->{$geneid} = $ec2plevel->{$1}->{genes}->{$geneid} if exists $ec2plevel->{$1}->{genes}->{$geneid};
		    }
		}
	    }
	    $pathways{$pid}->{p_all}->{fams} = $fams if $fams ne "";
	    $pathways{$pid}->{p_all}->{plevel} = sum (values %{$pathways{$pid}->{pgenes}});
	}
	close(INPUT);
	$/= "\n";
    }

    #generate separate output for each meteagenomics sample
    foreach my $msample (@msamples){
	my $cmd = "MinPath.py -any $prefix.$msample.txt -map ec2path -report $prefix.$msample.minpath -details $prefix.$msample.minpath.details > /dev/null 2>&1;";
	msg("******start running minpath $cmd\n");
	runcmd("$cmd");
	msg("******Finish running minpath $cmd \n\n");
	open (INPUT, "$prefix.$msample.minpath.details") or die "Could not find $prefix.$msample.minpath.details to read\n";
	$/= "\npath";
	while (<INPUT>) {
	    my $fams = "";
	    my @items = split(/\n/, $_);
	    my $fam_p_expressed = 0;
	    my $abd = 0;
	    foreach my $item (@items){
		$item =~ s/^\s+//;
		if($item =~ /(\d+)\s+fam0\s+(\d+)\s+fam-found\s+(\d+)\s+\#\s+(\S.*?)$/){
		    $pid = $1;
		    #$show_pathway .= "$pid";
		    $pathways{$pid}->{fam0} = $2 if not exists $pathways{$pid}->{fam0};
		    $pathways{$pid}->{msamples}->{$msample}->{fam_found} = $3;
		    $pathways{$pid}->{name} = $4 if not exists $pathways{$pid}->{name};

		}
		elsif($item =~ /^(\S+)\s+hits/){
		    $fams .= $fams eq "" ? "$1" : "+$1";
		    for my $geneid (keys %{$ec2genes->{$1}->{msamples}->{$msample}->{genes}}){
			 $pathways{$pid}->{msamples}->{$msample}->{genes}->{$geneid} = $ec2genes->{$1}->{msamples}->{$msample}->{genes}->{$geneid} if exists $ec2genes->{$1}->{msamples}->{$msample}->{genes}->{$geneid};
		     }
		}
	    }
	    $pathways{$pid}->{msamples}->{$msample}->{fams} = $fams if $fams ne "";
	    $pathways{$pid}->{msamples}->{$msample}->{totalAvgDepth} = sum (values %{$pathways{$pid}->{msamples}->{$msample}->{genes}});

	}
	close(INPUT);

    }
    #generate separate output for each proteomics sample
    foreach my $psample (@psamples){
	my $cmd = "MinPath.py -any $prefix.plevel.$psample.txt -map ec2path -report $prefix.plevel.$psample.minpath -details $prefix.plevel.$psample.minpath.details > /dev/null 2>&1;";
	msg("******start running minpath $cmd\n");
	runcmd("$cmd");
	msg("******Finish running minpath $cmd \n\n");
	open (INPUT, "$prefix.plevel.$psample.minpath.details") or die "Could not find $prefix.plevel.$psample.minpath.details to read\n";
	$/= "\npath";
	while (<INPUT>) {
	    my $fams = "";
	    my @items = split(/\n/, $_);
	    foreach my $item (@items){
		$item =~ s/^\s+//;
		if($item =~ /(\d+)\s+fam0\s+(\d+)\s+fam-found\s+(\d+)\s+\#\s+(\S.*?)$/){
		    $pid = $1;
		    #$show_pathway .= "$pid";
		    $pathways{$pid}->{fam0} = $2 if not exists $pathways{$pid}->{fam0};
		    $pathways{$pid}->{psamples}->{$psample}->{fam_found} = $3;
		    $pathways{$pid}->{name} = $4 if not exists $pathways{$pid}->{name};
		}
		elsif($item =~ /^(\S+)\s+hits/){
		    $fams .= $fams eq "" ? "$1" : "+$1";
		    for my $geneid (keys %{$ec2plevel->{$1}->{psamples}->{$psample}->{genes}}){
			$pathways{$pid}->{psamples}->{$psample}->{genes}->{$geneid} = $ec2plevel->{$1}->{psamples}->{$psample}->{genes}->{$geneid} if exists $ec2plevel->{$1}->{psamples}->{$psample}->{genes}->{$geneid};
		    }
		}
	    }
	    $pathways{$pid}->{psamples}->{$psample}->{fams} = $fams if $fams ne "";
	    $pathways{$pid}->{psamples}->{$psample}->{plevel} = sum (values %{$pathways{$pid}->{psamples}->{$psample}->{genes}});
	}
	close(INPUT);
    }



    open (TABLE, ">$prefix.minpath.datatable.json") or die "Could not open  $prefix.minpath.datatable.json to write\n";
    my $str = "";
    print TABLE "data = [\n";
    foreach my $pid (sort {$a <=> $b} keys %pathways){
	$str .= (' ' x 2) . "{\n";
	my $name = exists $pathways{$pid}->{name} ? $pathways{$pid}->{name} : "";
	$str .= (' ' x 2) . "\"id\": \"$name\",\n";
	my $type = (exists $pid2info{$name}->{"TYPES"}) ?  $pid2info{$name}->{"TYPES"} : "N/A";
	$str .= (' ' x 2) . "\"types\": \"$type\",\n";

	my $common_name = (exists $pid2info{$name}->{"COMMON-NAME"}) ?  $pid2info{$name}->{"COMMON-NAME"} : "N/A";
	$str .= (' ' x 2) . "\"common_name\": \"$common_name\",\n";

	$str .= (' ' x 2) . "\"pid\": \"$pid\",\n";
	$str .= (' ' x 2) . "\"fam0\": \"$pathways{$pid}->{fam0}\",\n" if exists $pathways{$pid}->{fam0};

	$str .= exists $pathways{$pid}->{fams} ? (' ' x 2) . "\"fams\": \"$pathways{$pid}->{fams}\",\n" : "\"fams\":\"\",\n";

	my $fam_found = exists $pathways{$pid}->{m_all}->{fam_found} ? $pathways{$pid}->{m_all}->{fam_found} : 0;
	$str .= (' ' x 2) . "\"fam_found\": \"$fam_found\",\n";

	my $geneCount = keys %{$pathways{$pid}->{mgenes}};
	my $count_percent = sprintf("%.2f", $geneCount*100/$cds_count_total);
	$str .=  (' ' x 2) . "\"Count\": $geneCount,\n";
	$str .=  (' ' x 2) . "\"Count_pct\": $count_percent,\n";

	if(scalar(@msamples)){

	    my $abd = exists  $pathways{$pid}->{totalAvgDepth} ? sprintf("%0.2f", $pathways{$pid}->{totalAvgDepth}) : 0;
	    my $abd_pct = $cds_abd_total != 0 ? sprintf("%0.2f", 100 * $abd/$cds_abd_total) : 0;
	    $str .= (' ' x 2) . "\"Abundance\": \"$abd\",\n";
	    $str .= (' ' x 2) . "\"Abundance_pct\": \"$abd_pct\",\n";


	    foreach my $msample (@msamples){

		my $fams_ms = exists $pathways{$pid}->{msamples}->{$msample}->{fams} ? $pathways{$pid}->{msample}->{$msample}->{fams} : "";
		$str .=  exists $pathways{$pid}->{msamples}->{$msample}->{fams} ? (' ' x 2) . "\"fams\_$msample\": \"$pathways{$pid}->{msamples}->{$msample}->{fams}\",\n" : "\"fams\_$msample\":\"\",\n";

		my $fam_found_ms = exists $pathways{$pid}->{msamples}->{$msample}->{fam_found} ? $pathways{$pid}->{msamples}->{$msample}->{fam_found} : 0;
		$str .=  (' ' x 2) . "\"fam_found\_$msample\": \"$fam_found_ms\",\n";

		my $msample_cds_count = $totals{"CDS"}->{msamples}->{$msample}->{count};

		my $count = keys %{$pathways{$pid}->{msamples}->{$msample}->{genes}};
		my $count_pct = sprintf("%.2f", $geneCount*100/$msample_cds_count);
		$str .=  (' ' x 2) . "\"count\_$msample\": \"$count\",\n";
		$str .=  (' ' x 2) . "\"count_pct\_$msample\": \"$count_pct\",\n";


		my $msample_cds_totalAvgDepth = $totals{"CDS"}->{msamples}->{$msample}->{totalAvgDepth};
		my $abd = exists $pathways{$pid}->{msamples}->{$msample}->{totalAvgDepth} ? sprintf("%0.2f",$pathways{$pid}->{msamples}->{$msample}->{totalAvgDepth}) : 0;
		my $abd_pct = $msample_cds_totalAvgDepth != 0 ? sprintf("%0.2f",100*$abd/$msample_cds_totalAvgDepth) : 0;
		$str .=  (' ' x 2) . "\"depth\_$msample\": \"$abd\",\n";
		$str .=  (' ' x 2) . "\"depth_pct\_$msample\": \"$abd_pct\",\n";
	    }
	}

	if(scalar(@psamples)){

	    my $p_fams = exists $pathways{$pid}->{p_all}->{fams} ? $pathways{$pid}->{p_all}->{fams} : "";
	    $str .= (' ' x 2) . "\"p_fams\": \"$p_fams\",\n";
	    my $p_fam_found = exists $pathways{$pid}->{p_all}->{fam_found} ? $pathways{$pid}->{p_all}->{fam_found} : 0;
	    $str .= (' ' x 2) . "\"p_fam_found\": \"$p_fam_found\",\n";

	    my $cds_count_total = $totals{"CDS"}->{count};
	    my $geneCount = keys %{$pathways{$pid}->{pgenes}};
	    my $count_percent = sprintf("%.2f", $geneCount*100/$cds_count_total);

	    $str .=  (' ' x 2) . "\"p_genecount\": $geneCount,\n";
	    $str .=  (' ' x 2) . "\"p_genecount_pct\": $count_percent,\n";


	    foreach my $psample (@psamples){

		my $s_fams = exists $pathways{$pid}->{psamples}->{$psample}->{fams} ? $pathways{$pid}->{psamples}->{$psample}->{fams} : "";
		$str .=  (' ' x 2) . "\"p_fams_$psample\": \"$s_fams\",\n";
		my $s_fam_found = exists $pathways{$pid}->{psamples}->{$psample}->{fam_found} ? $pathways{$pid}->{psamples}->{$psample}->{fam_found} : 0;
		$str .=  (' ' x 2) . "\"p_fam_found_$psample\": \"$s_fam_found\",\n";

		my $count = keys %{$pathways{$pid}->{psamples}->{$psample}->{genes}};

		$str .=  (' ' x 2) . "\"p_genecount\_$psample\": \"$count\",\n";

		my $fam_p_expressed = exists $pathways{$pid}->{psamples}->{$psample}->{plevel} ? sprintf("%0.2f",$pathways{$pid}->{psamples}->{$psample}->{plevel}) : 0;
		$str .=  (' ' x 2) . "\"p\_$psample\": \"$fam_p_expressed\",\n";
	    }
	}
	$str .=(' ' x 2) . "},\n";
    }
    $str =~ s/,$//;

    print TABLE $str;
    print TABLE "]\n";
    close(TABLE);
    output_metacyc_tablecols("$prefix.minpath.tablecol.json");

}

sub output_metacyc_tablecols{
    my ($outFile) = @_;
    msg("Writing to $outFile");
    open my $tablecol_fh, '>', "$outFile";
    print $tablecol_fh "tablecol = [\n";
    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"Pathway Entry\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"id\",\n";
    print $tablecol_fh (' ' x 2), "\"render\": function(data,type,full,meta){\n";
    print $tablecol_fh (' ' x 4), "return \'<a href=\"https://biocyc.org/META/NEW-IMAGE?type=PATHWAY&object=\' + data + \'\">\' + data + \'</a>\';\n";
    print $tablecol_fh (' ' x 2), "}\n";
    print $tablecol_fh "},\n";

    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"Name\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"common_name\"\n";
    #print $tablecol_fh (' ' x 2), "\"render\": function(data,type,full,meta){\n";
    #print $tablecol_fh (' ' x 4), "name = full.id;\n";
    #print $tablecol_fh (' ' x 4), "return \'<a href=\"https://biocyc.org/META/NEW-IMAGE?type=PATHWAY&object=\' + name + \'\">\' + data + \'</a>\';\n";
    #print $tablecol_fh (' ' x 2), "}\n";
    print $tablecol_fh "},\n";
    #print $tablecol_fh "{\n";
    #print $tablecol_fh (' ' x 2), "\"title\": \"Types\",\n";
    #print $tablecol_fh (' ' x 2), "\"data\": \"types\"\n";
    #print $tablecol_fh "},\n";

    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"fam0\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"fam0\"\n";
    print $tablecol_fh "},\n";
    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"MTFF\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"fam_found\"\n";
    print $tablecol_fh "},\n";

    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"Count\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"Count\"\n";
    print $tablecol_fh "},\n";
    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"Count%\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"Count_pct\"\n";


    if(@msamples || @psamples){
	print $tablecol_fh "},\n";
	if(@msamples){
	    print $tablecol_fh "{\n";
	    print $tablecol_fh (' ' x 2), "\"title\": \"A\",\n";
	    print $tablecol_fh (' ' x 2), "\"data\": \"Abundance\"\n";
	     print $tablecol_fh "},\n";

	    print $tablecol_fh "{\n";
	    print $tablecol_fh (' ' x 2), "\"title\": \"A%\",\n";
	    print $tablecol_fh (' ' x 2), "\"data\": \"Abundance_pct\"\n";
	    print $tablecol_fh "},\n";


	    for my $i (0 .. $#msamples){
		#print $tablecol_fh "{\n";
		#print $tablecol_fh (' ' x 2), "\"title\": \"TFF$_\",\n";
		#print $tablecol_fh (' ' x 2), "\"data\": \"fam_found\_$_\"\n";
		#print $tablecol_fh "},\n";

		#print $tablecol_fh "{\n";
		#print $tablecol_fh (' ' x 2), "\"title\": \"$_\",\n";
		#print $tablecol_fh (' ' x 2), "\"data\": \"depth\_$_\"\n";
		#print $tablecol_fh "},\n";

		print $tablecol_fh "{\n";
		print $tablecol_fh (' ' x 2),"\"title\": \"$msamples[$i]%\",\n";
		print $tablecol_fh (' ' x 2),"\"data\": \"depth_pct\_$msamples[$i]\"\n";
		#print $tablecol_fh (' ' x 2),"}\n";
		if($i < $#msamples){
		    print $tablecol_fh "},\n";
		}
	    }
	}
	if(@psamples){
	    print $tablecol_fh "},\n";

	    print $tablecol_fh "{\n";
	    print $tablecol_fh (' ' x 2), "\"title\": \"PTFF\",\n";
	    print $tablecol_fh (' ' x 2), "\"data\": \"p_fam_found\"\n";
	    print $tablecol_fh "},\n";

	    foreach my $i (0 .. $#psamples){
		print $tablecol_fh "{\n";
		print $tablecol_fh (' ' x 2),"\"title\": \"$psamples[$i]\",\n";
		#print $tablecol_fh (' ' x 2),"\"data\": \"$_\_total_found\"\n";
		print $tablecol_fh (' ' x 2),"\"data\": \"p_$psamples[$i]\",\n";
		if($i < $#psamples){
		    print $tablecol_fh "},\n";
		}
	    }
	}
	print $tablecol_fh "}\n";
    }
    else{
	print $tablecol_fh "}\n";
    }
    print $tablecol_fh "];\n";
    close($tablecol_fh);
}



sub output_cds_taxon_summary{
    my ($seqHash, $datadir, $msamples) = @_;
    my %taxon2genes = ();
    for my $sid (sort {$seqHash{$b}{DNA}->length <=> $seqHash{$a}{DNA}->length} keys %$seqHash){
	next if not exists $seqHash->{$sid}{FEATURE};
	for my $f ( sort { $a->start <=> $b->start } @{ $seqHash->{$sid}{FEATURE} }) {
	    next if $f->primary_tag ne "CDS";
            my $geneid = ($f->get_tag_values("ID"))[0];
	    my $totalAvgDepth = ($f->has_tag("depth")) ? ($f->get_tag_values("depth"))[0] : 0;
	    my $sampleDepth = ($f->has_tag("sampleDepth")) ? ($f->get_tag_values("sampleDepth"))[0] : ();
	    my $taxon = ($f->has_tag("genomedb_OC")) ? ($f->get_tag_values("genomedb_OC"))[0] : "UNKNOWN";
            $taxon =~ s/\s+/\-/g;
	    push(@{$taxon2genes{$taxon}->{genes}}, $geneid);
	    $taxon2genes{$taxon}->{totalAvgDepth} += $totalAvgDepth if $totalAvgDepth > 0;

	    foreach my $msample (@msamples){
		if($sampleDepth->{$msample}){
		    $taxon2genes{$taxon}->{msamples}->{$msample}->{totalAvgDepth}  += $sampleDepth->{$msample};
		}
	    }

        }
    }
    msg("Writing to $datadir/taxon.cds.summary.tab.txt");
    open my $taxon_fh, '>', "$datadir/taxon.cds.summary.tab.txt";
    my @taxon_fh_header = ("taxon", "count", "count_pct");
    open my $datatable_fh, '>', "$datadir/taxon.cds.datatable.json";
    if(scalar (@msamples)){
	push(@taxon_fh_header,"abundance");
	push(@taxon_fh_header,"abundance_pct");
    }

    foreach my $msample (@msamples){
	push(@taxon_fh_header,"depth_$msample");
	push(@taxon_fh_header,"depth_pct_$msample");
    }
    print $taxon_fh "#", join("\t", @taxon_fh_header), "\n";


    msg("Writing to $datadir/taxon.cds.datatable.json");
    my $datatable_jsonstr .= "data = [\n";

    my $total_taxon = keys %taxon2genes;
    my $c_taxon = 0;

    foreach my $oc (keys %taxon2genes){
	$c_taxon++;
	my $geneCount = exists  $taxon2genes{$oc}->{genes} ? @{$taxon2genes{$oc}->{genes}} : 0;
	my $count_percent = sprintf("%.2f", $geneCount*100/$totals{"CDS"}->{count});

	my @taxon_fh_l = ($oc, $geneCount, $count_percent);

	$datatable_jsonstr .= (' ' x 2) . "{\n";
	$datatable_jsonstr .=  (' ' x 3) . "\"Name\": \"$oc\",\n";
	$datatable_jsonstr .=  (' ' x 3) . "\"Count\": $geneCount,\n";
	$datatable_jsonstr .=  (' ' x 3) . "\"Count_pct\": $count_percent,\n";

	if(scalar (@msamples)){

	    my $abd =  $cds_abd_total != 0 ? sprintf("%.2f",$taxon2genes{$oc}->{totalAvgDepth}) :  "\"N/A\"";
	    my $abd_pct = $cds_abd_total != 0 ? sprintf("%.2f", $abd*100/$cds_abd_total): "\"N/A\"";
	    $datatable_jsonstr .=  (' ' x 2) . "\"Abundance\": $abd,\n";
	    $datatable_jsonstr .=  (' ' x 2) . "\"Abundance_pct\": $abd_pct,\n";
	    push(@taxon_fh_l, $abd);
	    push(@taxon_fh_l, $abd_pct);
	}

	foreach my $msample (@msamples){

	    my $msample_cds_total_abd = exists $totals{"CDS"}->{msamples}->{$msample}->{totalAvgDepth} ? $totals{"CDS"}->{msamples}->{$msample}->{totalAvgDepth} : "N/A";
	    my $sampleAbd = $msample_cds_total_abd ne "N/A"  && exists $taxon2genes{$oc}->{msamples}->{$msample}->{totalAvgDepth} ? sprintf("%.2f",$taxon2genes{$oc}->{msamples}->{$msample}->{totalAvgDepth}) : 0;
	    my $sampleAbd_percent = $msample_cds_total_abd ne "N/A" ? sprintf("%.2f", $sampleAbd*100/$msample_cds_total_abd) : "\"N/A\"";
	    push(@taxon_fh_l, $sampleAbd);
	    push(@taxon_fh_l, $sampleAbd_percent);

	    $datatable_jsonstr .=  (' ' x 2) . "\"depth_$msample\": $sampleAbd,\n";
	    $datatable_jsonstr .=  (' ' x 2) . "\"depth_pct_$msample\": $sampleAbd_percent,\n";
	}

	$datatable_jsonstr =~ s/,$//;
	$datatable_jsonstr .=  (' ' x 2) . "},\n";


	#$datatable_jsonstr .=  $c_taxon < $total_taxon ? (' ' x 2) . "},\n" : (' ' x 2) . "}\n";
	print $taxon_fh join("\t", @taxon_fh_l), "\n";
    }
     $datatable_jsonstr .= (' ' x 2) . "]\n";

    print $datatable_fh $datatable_jsonstr;
    close($taxon_fh);
    close($datatable_fh);

    output_taxon_tablecols("$datadir/taxon.cds.tablecol.json",  $msamples);
    my $cmd = "$^X $bin/output_tree_json.pl -i $datadir/taxon.cds.summary.tab.txt -t Taxonomy> $datadir/taxon.cds.tree.json";

    msg("******start running $cmd\n");
    runcmd("$cmd");
    msg("******Finish running $cmd \n\n");
    output_taxon_treecol("$datadir/taxon.cds.treecol.json", $msamples);

    #$cmd = "$^X $bin/output_sunburst_json.bak.pl -i $datadir/taxon.cds.summary.tab.txt -t Taxonomy -p $datadir/taxon.cds.sunburst";
    $cmd = "$^X $bin/output_sunburst_json.pl -i $datadir/taxon.cds.summary.tab.txt -t Taxonomy -p $datadir/taxon.cds.sunburst;";
    if(length($depth)){
	$cmd .= "$^X $bin/output_sunburst_json.abund.pl -i $datadir/taxon.cds.summary.tab.txt -t Taxonomy -p $datadir/taxon.cds.sunburst";
    }
    msg("******start running $cmd\n");
    runcmd("$cmd");
    msg("******Finish running $cmd \n\n");
}

sub output_rRNA_taxon_summary{
    my ($seqHash, $datadir, $msamples) = @_;

    my %taxon2genes = ();

    for my $sid (sort {$seqHash{$b}{DNA}->length <=> $seqHash{$a}{DNA}->length} keys %$seqHash){
	next if not exists $seqHash->{$sid}{FEATURE};
        for my $f ( sort { $a->start <=> $b->start } @{ $seqHash->{$sid}{FEATURE} }) {
	    next if $f->primary_tag !~ /rRNA/; #"CDS";
	    my ($type) = $f->primary_tag =~ /^\S+?_(\d+\w+)/;
	    my $geneid = ($f->get_tag_values("ID"))[0];

	    my $totalAvgDepth = ($f->has_tag("depth")) ? ($f->get_tag_values("depth"))[0] : 0;
	    my $taxon = $f->has_tag("rRNA_taxon") ? ($f->get_tag_values("rRNA_taxon"))[0] : "unclassified";
	    my $sampleDepth = ($f->has_tag("sampleDepth")) ? ($f->get_tag_values("sampleDepth"))[0] : ();

	    push(@{$taxon2genes{$type}->{$taxon}->{genes}}, $geneid);
	    $taxon2genes{$type}->{$taxon}->{totalAvgDepth} += $totalAvgDepth;

	    foreach my $msample (@msamples){
		if($sampleDepth->{$msample}){
		    $taxon2genes{$type}->{$taxon}->{msamples}->{$msample}->{totalAvgDepth}  += $sampleDepth->{$msample};
		}
	    }

	}
    }


    foreach my $tp (keys %taxon2genes){

	msg("Writting to $datadir/taxon.$tp.summary.tab.txt");
	open my $taxon_fh, '>', "$datadir/taxon.$tp.summary.tab.txt";
	
	my @taxon_fh_header = ("taxon", "count", "count_pct");

	if(scalar (@msamples)){
	    push(@taxon_fh_header,"abundance");
	    push(@taxon_fh_header,"abundance_pct");
	    foreach my $msample (@msamples){
		push(@taxon_fh_header,"depth_$msample");
		push(@taxon_fh_header,"depth_pct_$msample");
	    }
	}
	print $taxon_fh "#", join("\t", @taxon_fh_header), "\n";

	msg("Writing to $datadir/taxon.$tp.datatable.json");
	open my $datatable_fh, '>', "$datadir/taxon.$tp.datatable.json";

	my $datatable_jsonstr = "data = [\n";

	my $total_taxon = keys %{$taxon2genes{$tp}};
	my $c_taxon = 0;
	#my $total_count = $taxon2genes{$tp}->{"count"};

	foreach my $oc (keys %{$taxon2genes{$tp}}){
	    $c_taxon++;

	    my $geneCount =  exists $taxon2genes{$tp}->{$oc}->{genes} ? @{$taxon2genes{$tp}->{$oc}->{genes}} : 0;
	    my $count_percent = sprintf("%.2f", 100*$geneCount/$totals{$tp}->{count});
	    my @taxon_fh_l = ($oc, $geneCount, $count_percent);

	    $datatable_jsonstr .= (' ' x 2) . "{\n";
	    $datatable_jsonstr .=  (' ' x 3) . "\"Name\": \"$oc\",\n";
	    $datatable_jsonstr .=  (' ' x 3) . "\"Count\": $geneCount,\n";
	    $datatable_jsonstr .=  (' ' x 3) . "\"Count_pct\": $count_percent,\n";


	    if(scalar (@msamples)){
		my $abd = (exists $totals{$tp} && $totals{$tp} > 0) ? sprintf("%.2f",$taxon2genes{$tp}->{$oc}->{totalAvgDepth}) : "\"N/A\"";
		my $abd_pct = (exists $totals{$tp}->{totalAvgDepth} && $totals{$tp}->{totalAvgDepth} > 0) ? sprintf("%.2f",100*$abd/$totals{$tp}->{totalAvgDepth}) : "\"N/A\"";

		$datatable_jsonstr .=  (' ' x 2) . "\"Abundance\": $abd,\n";
		$datatable_jsonstr .=  (' ' x 2) . "\"Abundance_pct\": $abd_pct,\n";
		push(@taxon_fh_l, $abd);
		push(@taxon_fh_l, $abd_pct);
	    }


	    foreach my $msample (@msamples){
		my $sampleAbd = exists $taxon2genes{$tp}->{$oc}->{msamples}->{$msample}->{totalAvgDepth} ? sprintf("%.2f",$taxon2genes{$tp}->{$oc}->{msamples}->{$msample}->{totalAvgDepth}) : 0;
		my $sampleAbd_percent = (exists $totals{$tp}->{msamples}->{$msample}->{totalAvgDepth} && $totals{$tp}->{msamples}->{$msample}->{totalAvgDepth} > 0) ? sprintf("%.2f", $sampleAbd*100/$totals{$tp}->{msamples}->{$msample}->{totalAvgDepth}) : "\"N/A\"";
		push(@taxon_fh_l, $sampleAbd);
		push(@taxon_fh_l, $sampleAbd_percent);

		$datatable_jsonstr .=  (' ' x 2) . "\"depth_$msample\": $sampleAbd,\n";
		$datatable_jsonstr .=  (' ' x 2) . "\"depth_pct_$msample\": $sampleAbd_percent,\n";
	    }
	    $datatable_jsonstr =~ s/,$//;
	    $datatable_jsonstr .=  (' ' x 2) . "},\n";
	    msg(join("\t", @taxon_fh_l) . "\n");
	    print $taxon_fh join("\t", @taxon_fh_l), "\n";
	}
	$datatable_jsonstr =~ s/,$//;
	$datatable_jsonstr .= (' ' x 1) . "]\n";

	print $datatable_fh $datatable_jsonstr;
	close($taxon_fh);
	close($datatable_fh);

	output_taxon_tablecols("$datadir/taxon.$tp.tablecol.json",  $msamples);

	#my $cmd = "$^X $bin/output_taxontree_json.pl -i $datadir/taxon.$tp.summary.tab.txt -t Taxonomy > $datadir/taxon.$tp.tree.json";
	my $cmd = "$^X $bin/output_tree_json.pl -i $datadir/taxon.$tp.summary.tab.txt -t Taxonomy > $datadir/taxon.$tp.tree.json";
	msg("******start running $cmd\n");
	runcmd("$cmd");
	msg("******Finish running $cmd \n\n");
	output_taxon_treecol("$datadir/taxon.$tp.treecol.json", $msamples);

	#$cmd = "$^X $bin/output_taxonsunburst_json.pl -i $datadir/taxon.$tp.summary.tab.txt -t Taxonomy -p $datadir/taxon.$tp.sunburst";
	$cmd = "$^X $bin/output_sunburst_json.pl -i $datadir/taxon.$tp.summary.tab.txt -t Taxonomy -p $datadir/taxon.$tp.sunburst;";
	
	if(length($depth)){
	    $cmd .= "$^X $bin/output_sunburst_json.abund.pl -i $datadir/taxon.$tp.summary.tab.txt -t Taxonomy -p $datadir/taxon.$tp.sunburst";
	}

	msg("******start running $cmd\n");
	runcmd("$cmd");
	msg("******Finish running $cmd \n\n");
    }

}

sub output_cds_annotation{
    my ($seqHash, $datadir) = @_;
    output_cds2sprot_annot($seqHash, $datadir);
    output_cds2pfam_annot($seqHash,$datadir);
    output_cds2tigrfam_annot($seqHash, $datadir);
}
sub output_other_element_annotation{

    #dbs are: tRNA, 16SrRNA, 18SrRNA, 23SrRNA, 28SrRNA, 5SrRNA, CRISPR
    my ($seqHash, $datadir, $feature) = @_;

    open TAB, ">$datadir/$feature.tab.txt";
    open JSON, ">$datadir/$feature.datatable.json";

    my @header = ();
    @header = ("Gene", "Start", "End", "Length", "Strand", "Contig", "Source", "Feature", "Taxonomy");

    print TAB "#", join("\t", @header), "\n";


    my $datatable_str .= "data = [\n";

    for my $sid (sort {$seqHash{$b}{DNA}->length <=> $seqHash{$a}{DNA}->length} keys %$seqHash){
	next if not exists $seqHash->{$sid}{FEATURE};
	for my $f ( sort { $a->start <=> $b->start } @{ $seqHash->{$sid}{FEATURE} }) {

	    my $type = $f->primary_tag;
	    next if $type !~ /$feature/;

	    my $source = $f->source_tag;
	    my $start = $f->start;
	    my $end = $f->end;
	    my $len = $end - $start + 1;
	    my $strand = $f->strand;
	    my $seqid = $f->seq_id;
	    my $id = ($f->get_tag_values("ID"))[0];
	    my $oc = $f->has_tag("rRNA_taxon") ? ($f->get_tag_values("rRNA_taxon"))[0] : "unknow";
	    my $taxon = "";
	    my $name = $f->has_tag("Name") ? ($f->get_tag_values("Name"))[0] : "\"N/A\"";
	    if($f->has_tag("rRNA_taxon")){
		my $value = ($f->get_tag_values("rRNA_taxon"))[0];
		my ($taxon) = $value =~ /(^[^;]*;[^;]*)/;
	     $taxon ||= "unknow";
       }
	    my @row = ($id, $start, $end, $len, $strand, $seqid, $source, $type, $oc);
	    print TAB join("\t", @row), "\n";

	    $datatable_str .= (' ' x 2) . "{\n";
	    $datatable_str .= (' ' x 2) . "\"seqname\": \"$seqid\",\n";
	    $datatable_str .= (' ' x 2) . "\"feature\": \"$type\",\n";
	    $datatable_str .= (' ' x 2) . "\"source\": \"$source\",\n";
	    $datatable_str .= (' ' x 2) . "\"start\": \"$start\",\n";
	    $datatable_str .= (' ' x 2) . "\"end\": \"$end\",\n";
	    $datatable_str .= (' ' x 2) . "\"len\": \"$len\",\n";
	    $datatable_str .= (' ' x 2) . "\"strand\": \"$strand\",\n";
	    $datatable_str .= (' ' x 2) . "\"ID\": \"$id\",\n";
	    $datatable_str .= (' ' x 2) . "\"rRNA_taxon\": \"$oc\",\n";
	    $datatable_str .= (' ' x 2) . "\"name\": \"$name\"\n";
	    $datatable_str .=(' ' x 2) . "},\n";

	}
    }
    $datatable_str =~ s/,$//;
    $datatable_str .= (' ' x 1) . "]\n";

    print JSON $datatable_str, "\n";
    close(TAB);
    close(JSON);
}

sub output_cds2pfam_annot{

    #dbs are: sprot|tigrfam|pfam
    my ($seqHash, $datadir) = @_;
    open TAB, ">$datadir/cds.gene2pfam.tab.txt";
    open JSON, ">$datadir/cds.gene2pfam.datatable.json";

    my @header = ("Gene", "pfamid", "SP", "TM", "Start", "End", "Length", "Strand", "Contig", "Source", "pfam_desc","Taxonomy");
    print TAB "#", join("\t", @header), "\n";;
    my %pfam2genes = ();

    my $datatable_str = "data = [\n";

    for my $sid (sort {$seqHash{$b}{DNA}->length <=> $seqHash{$a}{DNA}->length} keys %$seqHash){
	next if not exists $seqHash->{$sid}{FEATURE};
	for my $f ( sort { $a->start <=> $b->start } @{ $seqHash->{$sid}{FEATURE} }) {
	    next if $f->primary_tag ne "CDS";


	    my $geneid = ($f->get_tag_values("ID"))[0];
	    my $totalAvgDepth = ($f->has_tag("depth")) ? ($f->get_tag_values("depth"))[0] : 0;
	    my $sampleDepth = ($f->has_tag("sampleDepth")) ? ($f->get_tag_values("sampleDepth"))[0] : ();
	    my $p_express_level = ($f->has_tag("samplePlevel")) ? ($f->get_tag_values("samplePlevel"))[0] : ();



	    my $source = $f->source_tag;
	    my $start = $f->start;
	    my $end = $f->end;
	    my $len = $end - $start + 1;
	    my $strand = $f->strand;
	    my $seqid = $f->seq_id;
	    my $sp = $f->has_tag("sp") ?  ($f->get_tag_values("sp"))[0] : "No";
	    my $tm = $f->has_tag("tm_num") ?  ($f->get_tag_values("tm_num"))[0] : "0";
	    my $oc = $f->has_tag("genomedb_OC") ? ($f->get_tag_values("genomedb_OC"))[0] : "UNKNOWN";

	    my $pids = "";
	    my $descs = "";
	    my $i = 0;
	    if($f->has_tag("pfam_id")){

                for my $target ($f->get_tag_values("pfam_id")) {
		    my $desc = $f->has_tag("pfam_desc") ? ($f->get_tag_values("pfam_desc"))[$i] : "UNKNOWN";
		    $descs .= "\"$desc\";";
		    my $target = $f->has_tag("pfam_target") ? ($f->get_tag_values("pfam_target"))[$i] : "UNKNOWN";
		    my($pid) = $target ne "UNKNOWN" ? $target =~ /db:Pfam-A.hmm\|(\S+)/ : "UNKNOWN";
		    my $pname = $f->has_tag("pfam_id") ? ($f->get_tag_values("pfam_id"))[$i] : "UNKNOWN";
		    my $tp =  $f->has_tag("pfam_type") ? ($f->get_tag_values("pfam_type"))[$i] : "UNKNOWN";
		    $pids .= "$pid;";

		    $pfam2genes{$pid}->{"desc"} = $desc;
		    $pfam2genes{$pid}->{"ID"} = $pname;
		    $pfam2genes{$pid}->{"type"} = $tp;

		    push(@{$pfam2genes{$pid}->{genes}}, $geneid);
		    $pfam2genes{$pid}->{totalAvgDepth} += $totalAvgDepth if $totalAvgDepth > 0;

		    foreach my $msample (@msamples){
			if($sampleDepth->{$msample}){
			    $pfam2genes{$pid}->{msamples}->{$msample}->{totalAvgDepth}  += $sampleDepth->{$msample};
			}
		    }
		    foreach my $psample (@psamples){
			if($p_express_level->{$psample}){
			    $pfam2genes{$pid}->{psamples}->{$psample}->{total_plevel}  += $p_express_level->{$psample};
			$pfam2genes{$pid}->{total_plevel}  += $p_express_level->{$psample};
			}
		    }
		    $i++;
		}
		my @row = ($geneid, $pids, $sp, $tm, $start, $end, $len, $strand, $seqid, $source, $descs, $oc);
		print TAB join("\t", @row), "\n";

		$datatable_str .= (' ' x 2) . "{\n";
		$datatable_str .= (' ' x 2) . "\"seqname\": \"$seqid\",\n";
		$datatable_str .= (' ' x 2) . "\"feature\": \"CDS\",\n";
		$datatable_str .= (' ' x 2) . "\"source\": \"$source\",\n";
		$datatable_str .= (' ' x 2) . "\"start\": \"$start\",\n";
		$datatable_str .= (' ' x 2) . "\"end\": \"$end\",\n";
		$datatable_str .= (' ' x 2) . "\"len\": \"$len\",\n";
		$datatable_str .= (' ' x 2) . "\"strand\": \"$strand\",\n";
		$datatable_str .= (' ' x 2) . "\"ID\": \"$geneid\",\n";
		$datatable_str .= (' ' x 2) . "\"sp\": \"$sp\",\n";
		$datatable_str .= (' ' x 2) . "\"tm\": \"$tm\",\n";
		$datatable_str .= (' ' x 2) . "\"genomedb_OC\": \"$oc\",\n";
		$datatable_str .= (' ' x 2) . "\"accession\": \"$pids\",\n";
		$datatable_str .= (' ' x 2) . "\"desc\": \"$descs\"\n";
		$datatable_str .=(' ' x 2) . "},\n";

	    }
	    else{

		my ($desc, $pid, $pname, $tp) = ("UNKNOWN", "UNKNOWN","UNKNOWN","UNKNOWN");

		$pfam2genes{$pid}->{"desc"} = $desc;
		$pfam2genes{$pid}->{"ID"} = $pname;
		$pfam2genes{$pid}->{"type"} = $tp;

		push(@{$pfam2genes{$pid}->{genes}}, $geneid);
		$pfam2genes{$pid}->{totalAvgDepth} += $totalAvgDepth if $totalAvgDepth > 0;

		foreach my $msample (@msamples){
		    if($sampleDepth->{$msample}){
			$pfam2genes{$pid}->{msamples}->{$msample}->{totalAvgDepth}  += $sampleDepth->{$msample};
		    }
		}
		foreach my $psample (@psamples){
		    if($p_express_level->{$psample}){
			$pfam2genes{$pid}->{psamples}->{$psample}->{total_plevel}  += $p_express_level->{$psample};
                        $pfam2genes{$pid}->{total_plevel}  += $p_express_level->{$psample};
		    }
		}

	    }

	}
    }
    $datatable_str =~ s/,$//;
    $datatable_str .= (' ' x 1) . "]\n";

    print JSON $datatable_str, "\n";
    close(TAB);
    close(JSON);




    msg("Writing to $datadir/cds.pfam2genes.tab.txt");
    open my $tab_fh, '>', "$datadir/cds.pfam2genes.tab.txt";

    @header = ("accession", "id", "type", "count", "count_pct");

    if(@msamples){
	push(@header,"abundance");
	push(@header,"abundance_pct");

	foreach my $msample (@msamples){
	    push(@header,"depth_$msample");
	    push(@header,"depth_pct_$msample");
	}
    }
    if(@psamples){
	foreach my $psample (@psamples){
	    push(@header,"plevel_pct_$psample");
	}
    }

    push(@header,"desc");

    print $tab_fh "#", join("\t", @header), "\n";


    msg("Writing to $datadir/cds.pfam2genes.datatable.json");
    open my $datatable_fh, '>', "$datadir/cds.pfam2genes.datatable.json";

    my $datatable_jsonstr = "data = [\n";

    my $pid_total = keys %pfam2genes;
    my $pid_count = 0;
    my $cds_count_total = $totals{"CDS"}->{count};
    #my $cds_abd_total = exists $totals{"CDS"}->{totalAvgDepth} ? $totals{"CDS"}->{totalAvgDepth} : "N/A";

    foreach my $pid (sort keys %pfam2genes){
	$pid_count++;
	my $desc = $pfam2genes{$pid}->{"desc"};
	my $id = $pfam2genes{$pid}->{"ID"};
	my $type = $pfam2genes{$pid}->{"type"};

	my $geneCount = @{$pfam2genes{$pid}->{genes}};
	my $count_percent = sprintf("%.2f", $geneCount*100/$cds_count_total);


	my @tab_fh_l = ($pid, $id, $type, $geneCount, $count_percent);

	#print $tab_fh join("\t", ($pid, $id, $type, $geneCount, $count_percent,$desc)), "\n";
	$datatable_jsonstr .= (' ' x 2) . "{\n";
	$datatable_jsonstr .=  (' ' x 2) . "\"Accession\": \"$pid\",\n";
	$datatable_jsonstr .=  (' ' x 2) . "\"ID\": \"$id\",\n";
	$datatable_jsonstr .=  (' ' x 2) . "\"Type\": \"$type\",\n";
	$datatable_jsonstr .=  (' ' x 2) . "\"Description\": \"$desc\",\n";
	$datatable_jsonstr .=  (' ' x 2) . "\"Count\": $geneCount,\n";
	$datatable_jsonstr .=  (' ' x 2) . "\"Count_pct\": $count_percent,\n";

	if(scalar (@msamples)){
	    my $abd =  exists $pfam2genes{$pid}->{totalAvgDepth} ? sprintf("%.2f",$pfam2genes{$pid}->{totalAvgDepth}) : 0;
	    my $abd_pct = $cds_abd_total != 0 ? sprintf("%.2f", $abd*100/$cds_abd_total): 0;
	    $datatable_jsonstr .=  (' ' x 2) . "\"Abundance\": $abd,\n";
	    $datatable_jsonstr .=  (' ' x 2) . "\"Abundance_pct\": $abd_pct,\n";
	    push(@tab_fh_l, $abd);
	    push(@tab_fh_l, $abd_pct);
	}

	foreach my $msample (@msamples){
	    my $msample_cds_total_abd = exists $totals{CDS}->{msamples}->{$msample}->{totalAvgDepth} ? $totals{CDS}->{msamples}->{$msample}->{totalAvgDepth} : 0;
	    my $sampleAbd = exists $pfam2genes{$pid}->{msamples}->{$msample}->{totalAvgDepth} ? sprintf("%.2f",$pfam2genes{$pid}->{msamples}->{$msample}->{totalAvgDepth}) : 0;
	    my $sampleAbd_percent = $msample_cds_total_abd != 0 ? sprintf("%.2f", $sampleAbd*100/$msample_cds_total_abd) : 0;
	    push(@tab_fh_l, $sampleAbd);
	    push(@tab_fh_l, $sampleAbd_percent);

	    $datatable_jsonstr .=  (' ' x 2) . "\"depth_$msample\": $sampleAbd,\n";
	    $datatable_jsonstr .=  (' ' x 2) . "\"depth_pct_$msample\": $sampleAbd_percent,\n";
	}
	my $p_total_expressed = exists $pfam2genes{$pid}->{total_plevel} ? sprintf("%.2f", $pfam2genes{$pid}->{total_plevel}) : 0;
	$datatable_jsonstr .=  (' ' x 2) . "\"p_total_expressed\": $p_total_expressed,\n";
	foreach my $psample (@psamples){
	    my $plevel = exists $pfam2genes{$pid}->{psamples}->{$psample}->{total_plevel} ? sprintf("%.2f", $pfam2genes{$pid}->{psamples}->{$psample}->{total_plevel}) : 0;
	    $datatable_jsonstr .=  (' ' x 2) . "\"p\_$psample\": $plevel,\n";
	    push(@tab_fh_l, $plevel);
	}

	$datatable_jsonstr =~ s/,$//;
	$datatable_jsonstr .=  (' ' x 2) . "},\n";

	push(@tab_fh_l, $desc);
	print $tab_fh join("\t", @tab_fh_l), "\n";

    }

    $datatable_jsonstr .= (' ' x 1) . "]\n";


    print $datatable_fh $datatable_jsonstr;

    close($datatable_fh);
    close($tab_fh);
    output_pfam_tablecols("$datadir/cds.pfam2genes.tablecol.json");
}
sub output_pfam_tablecols{
    my ($outFile) = @_;
    msg("Writing to $outFile");
    open my $tablecol_fh, '>', "$outFile";
    print $tablecol_fh "tablecol = [\n";
    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"Accession\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"Accession\",\n";
    print $tablecol_fh (' ' x 2), "\"render\": function(data,type,full,meta){\n";
    print $tablecol_fh (' ' x 4), "return \'<a href=\"http://pfam.xfam.org/family/\' + data + \'\">\' + data + \'</a>\';\n";
    print $tablecol_fh (' ' x 2), "}\n";
    print $tablecol_fh "},\n";

    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"ID\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"ID\"\n";
    print $tablecol_fh "},\n";
    #print $tablecol_fh "{\n";
    #print $tablecol_fh (' ' x 2), "\"title\": \"Type\",\n";
    #print $tablecol_fh (' ' x 2), "\"data\": \"Type\"\n";
    #print $tablecol_fh "},\n";
    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"Description\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"Description\"\n";
    print $tablecol_fh "},\n";

    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"Count\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"Count\"\n";
    print $tablecol_fh "},\n";
    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"Count%\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"Count_pct\"\n";


    if(@msamples || @psamples){
	print $tablecol_fh "},\n";

	if(@msamples){

	    #print $tablecol_fh "{\n";
	    #print $tablecol_fh (' ' x 2), "\"title\": \"A\",\n";
	    #print $tablecol_fh (' ' x 2), "\"data\": \"Abundance\"\n";
	    #print $tablecol_fh "},\n";

	    print $tablecol_fh "{\n";
	    print $tablecol_fh (' ' x 2), "\"title\": \"A%\",\n";
	    print $tablecol_fh (' ' x 2), "\"data\": \"Abundance_pct\"\n";
	    print $tablecol_fh "},\n";

	    for my $i (0 .. $#msamples){
		print $tablecol_fh "{\n";
		print $tablecol_fh (' ' x 2),"\"title\": \"$msamples[$i]%\",\n";
		print $tablecol_fh (' ' x 2),"\"data\": \"depth_pct\_$msamples[$i]\"\n";
		#print $tablecol_fh "},\n";
		if($i < $#msamples){
		    print $tablecol_fh "},\n";
		}

	    }
	}
	if(@psamples){
	    print $tablecol_fh "},\n";
	    foreach my $i (0 .. $#psamples){
		print $tablecol_fh "{\n";
		print $tablecol_fh (' ' x 2),"\"title\": \"$psamples[$i]%\",\n";
		print $tablecol_fh (' ' x 2),"\"data\": \"p\_$psamples[$i]\"\n";
		if($i < $#psamples){
		    print $tablecol_fh "},\n";
		}
	    }
	}
	print $tablecol_fh "}\n";
    }
    else{
	print $tablecol_fh "}\n";
    }
    print $tablecol_fh "];\n";
    close($tablecol_fh);
}


sub output_cds2tigrfam_annot{

    #dbs are: sprot|tigrfam|tigrfam
    my ($seqHash, $datadir) = @_;


    open TAB, ">$datadir/cds.gene2tigrfam.tab.txt";
    open JSON, ">$datadir/cds.gene2tigrfam.datatable.json";

    my @header = ("Gene", "tigrfamid", "SP", "TM", "Start", "End", "Length", "Strand", "Contig", "Source", "tigrfam_desc","Taxonomy");

    print TAB "#", join("\t", @header), "\n";;


    my $datatable_str .= "data = [\n";


    my %tigrfam2genes = ();
    for my $sid (sort {$seqHash{$b}{DNA}->length <=> $seqHash{$a}{DNA}->length} keys %$seqHash){
	next if not exists $seqHash->{$sid}{FEATURE};
	for my $f ( sort { $a->start <=> $b->start } @{ $seqHash->{$sid}{FEATURE} }) {
	    next if $f->primary_tag ne "CDS";


	    my $geneid = ($f->get_tag_values("ID"))[0];
	    my $totalAvgDepth = ($f->has_tag("depth")) ? ($f->get_tag_values("depth"))[0] : 0;
	    my $sampleDepth = ($f->has_tag("sampleDepth")) ? ($f->get_tag_values("sampleDepth"))[0] : ();
	    my $p_express_level = ($f->has_tag("samplePlevel")) ? ($f->get_tag_values("samplePlevel"))[0] : ();


	    my $source = $f->source_tag;
	    my $start = $f->start;
	    my $end = $f->end;
	    my $len = $end - $start + 1;
	    my $strand = $f->strand;
	    my $seqid = $f->seq_id;

	    my $sp = $f->has_tag("sp") ?  ($f->get_tag_values("sp"))[0] : "No";
	    my $tm = $f->has_tag("tm_num") ?  ($f->get_tag_values("tm_num"))[0] : "0";
	    my $taxon = $f->has_tag("genomedb_OC") ? ($f->get_tag_values("genomedb_OC"))[0] : "UNKNOWN";

	    my $tids = "";
	    my $descs = "";

	    my $i = 0;
	    if($f->has_tag("tigrfam_target")){

		for my $target ($f->get_tag_values("tigrfam_target")) {

		    my($tid) = $target =~ /db:TIGRFAMs.hmm\|(\S+)/;
		    $tids .= "$tid;";

		    my $desc = ($f->get_tag_values("tigrfam_desc"))[$i];
		    $descs .= "\"$desc\";";
		    my $tname = ($f->get_tag_values("tigrfam_id"))[$i];
		    my $tit = ($f->get_tag_values("tigrfam_it"))[$i];

		    my $mainrole = $f->has_tag("tigrfam_mainrole") ? ($f->get_tag_values("tigrfam_mainrole"))[$i] : "UNKNOWN";
		    my $subrole = $f->has_tag("tigrfam_sub1role") ? ($f->get_tag_values("tigrfam_sub1role"))[$i]  : "UNKNOWN";

		    $tigrfam2genes{$tid}->{"desc"} = $desc;
		    $tigrfam2genes{$tid}->{"name"} = $tname;
		    $tigrfam2genes{$tid}->{"isology"} = $tit;
		    $tigrfam2genes{$tid}->{"mainrole"} =$mainrole;
		    $tigrfam2genes{$tid}->{"subrole"} = $subrole;

		    push(@{$tigrfam2genes{$tid}->{genes}}, $geneid);

		    $tigrfam2genes{$tid}->{totalAvgDepth} += $totalAvgDepth;
		    foreach my $msample (@msamples){
			if($sampleDepth->{$msample}){
			    $tigrfam2genes{$tid}->{msamples}->{$msample}->{totalAvgDepth}  += $sampleDepth->{$msample};
			}
		    }
		    foreach my $psample (@psamples){
			if($p_express_level->{$psample}){
			    $tigrfam2genes{$tid}->{psamples}->{$psample}->{total_plevel}  += $p_express_level->{$psample};
			    $tigrfam2genes{$tid}->{total_plevel}  += $p_express_level->{$psample};
			}
		    }
		    $i++;
		}
		my @row = ($geneid, $tids, $sp, $tm, $start, $end, $len, $strand, $seqid, $source,  $descs, $taxon);
		print TAB join("\t", @row), "\n";

		$datatable_str .= (' ' x 2) . "{\n";
		$datatable_str .= (' ' x 2) . "\"seqname\": \"$seqid\",\n";
		$datatable_str .= (' ' x 2) . "\"feature\": \"CDS\",\n";
		$datatable_str .= (' ' x 2) . "\"source\": \"$source\",\n";
		$datatable_str .= (' ' x 2) . "\"start\": \"$start\",\n";
		$datatable_str .= (' ' x 2) . "\"end\": \"$end\",\n";
		$datatable_str .= (' ' x 2) . "\"len\": \"$len\",\n";
		$datatable_str .= (' ' x 2) . "\"strand\": \"$strand\",\n";
		$datatable_str .= (' ' x 2) . "\"ID\": \"$geneid\",\n";
		$datatable_str .= (' ' x 2) . "\"sp\": \"$sp\",\n";
		$datatable_str .= (' ' x 2) . "\"tm\": \"$tm\",\n";
		$datatable_str .= (' ' x 2) . "\"tigrfam_id\": \"$tids\",\n";
		$datatable_str .= (' ' x 2) . "\"tigrfam_desc\": \"$descs\",\n";
		$datatable_str .= (' ' x 2) . "\"taxon\": \"$taxon\"\n";
		$datatable_str .=(' ' x 2) . "},\n";


	    }
	    else{

		my($tid, $desc, $tname, $tit, $mainrole, $subrole) = ("UNKNOWN", "UNKNOWN","UNKNOWN","UNKNOWN","UNKNOWN","UNKNOWN");

		$tigrfam2genes{$tid}->{"desc"} = $desc;
		$tigrfam2genes{$tid}->{"name"} = $tname;
		$tigrfam2genes{$tid}->{"isology"} = $tit;
		$tigrfam2genes{$tid}->{"mainrole"} =$mainrole;
		$tigrfam2genes{$tid}->{"subrole"} = $subrole;

		push(@{$tigrfam2genes{$tid}->{genes}}, $geneid);

		$tigrfam2genes{$tid}->{totalAvgDepth} += $totalAvgDepth;
		foreach my $msample (@msamples){
		    if($sampleDepth->{$msample}){
			$tigrfam2genes{$tid}->{msamples}->{$msample}->{totalAvgDepth}  += $sampleDepth->{$msample};
		    }
		}
		foreach my $psample (@psamples){
		    if($p_express_level->{$psample}){
			$tigrfam2genes{$tid}->{psamples}->{$psample}->{total_plevel}  += $p_express_level->{$psample};
			$tigrfam2genes{$tid}->{total_plevel}  += $p_express_level->{$psample};
		    }
		}

	    }

	}
    }
    $datatable_str =~ s/,$//;
    $datatable_str .= (' ' x 1) . "]\n";

    print JSON $datatable_str, "\n";
    close(TAB);
    close(JSON);

    msg("Writing to $datadir/cds.tigrfam2genes.tab.txt");
    open my $tab_fh, '>', "$datadir/cds.tigrfam2genes.tab.txt";

    @header = ("accession", "name", "isology", "mainrole", "subrole", "count", "count_pct");
    if(@msamples){
	push(@header,"abundance");
	push(@header,"abundance_pct");
	foreach my $msample (@msamples){
	    push(@header,"depth_$msample");
	    push(@header,"depth_pct_$msample");
	}
    }
    if(@psamples){
	foreach my $psample (@psamples){
	    push(@header,"plevel_pct_$psample");
	}
    }

    push(@header, "description");
    print $tab_fh "#", join("\t", @header), "\n";

    msg("Writing to $datadir/cds.tigrfam2genes.datatable.json");
    open my $datatable_fh, '>', "$datadir/cds.tigrfam2genes.datatable.json";

    my $datatable_jsonstr .= "data = [\n";

    my $tid_total = keys %tigrfam2genes;
    my $tid_count = 0;

    my $cds_count_total = $totals{"CDS"}->{count};
    #my $cds_abd_total = exists $totals{"CDS"}->{totalAvgDepth} ? $totals{"CDS"}->{totalAvgDepth} : "N/A";

    foreach my $tid (sort keys %tigrfam2genes){
	$tid_count++;

	my $desc = exists $tigrfam2genes{$tid}->{"desc"} ? $tigrfam2genes{$tid}->{"desc"} : "";
	my $name = exists $tigrfam2genes{$tid}->{"name"} ? $tigrfam2genes{$tid}->{"name"} : "";
	my $it = exists $tigrfam2genes{$tid}->{"isology"} ? $tigrfam2genes{$tid}->{"isology"} : "";
	my $mainrole = exists $tigrfam2genes{$tid}->{"mainrole"} ? $tigrfam2genes{$tid}->{"mainrole"} : "";
	my $subrole = exists $tigrfam2genes{$tid}->{"subrole"} ? $tigrfam2genes{$tid}->{"subrole"} : "";

	$mainrole ||= "";
	$subrole ||= "";


	my $geneCount = @{$tigrfam2genes{$tid}->{genes}};
	my $count_percent = sprintf("%.2f", $geneCount*100/$cds_count_total);



	my @tab_fh_l = ($tid, $name, $it, $mainrole, $subrole, $geneCount, $count_percent);

	#print $tab_fh join("\t", ($tid, $name, $it, $mainrole, $subrole, $geneCount, $count_percent, $desc)), "\n";
	$datatable_jsonstr .= (' ' x 2) . "{\n";
	$datatable_jsonstr .=  (' ' x 2) . "\"Accession\": \"$tid\",\n";
	$datatable_jsonstr .=  (' ' x 2) . "\"Name\": \"$name\",\n";
	$datatable_jsonstr .=  (' ' x 2) . "\"Function\": \"$desc\",\n";
	$datatable_jsonstr .=  (' ' x 2) . "\"Isology\": \"$it\",\n";
	$datatable_jsonstr .=  (' ' x 2) . "\"Mainrole\": \"$mainrole\",\n";
	$datatable_jsonstr .=  (' ' x 2) . "\"Subrole\": \"$subrole\",\n";
	$datatable_jsonstr .=  (' ' x 2) . "\"Count\": $geneCount,\n";
	$datatable_jsonstr .=  (' ' x 2) . "\"Count_pct\": $count_percent,\n";

	if(scalar (@msamples)){
	    my $abd =  exists $tigrfam2genes{$tid}->{totalAvgDepth} ? sprintf("%.2f",$tigrfam2genes{$tid}->{totalAvgDepth}) : 0;
	    my $abd_pct = $cds_abd_total != 0 ? sprintf("%.2f", $abd*100/$cds_abd_total): 0;
	    $datatable_jsonstr .=  (' ' x 2) . "\"Abundance\": $abd,\n";
	    $datatable_jsonstr .=  (' ' x 2) . "\"Abundance_pct\": $abd_pct,\n";
	    push(@tab_fh_l, $abd);
	    push(@tab_fh_l, $abd_pct);
	}


	foreach my $msample (@msamples){
	    my $msample_cds_total_abd = exists $totals{CDS}->{msamples}->{$msample}->{totalAvgDepth} ? $totals{CDS}->{msamples}->{$msample}->{totalAvgDepth} : 0;
	    my $sampleAbd = exists $tigrfam2genes{$tid}->{msamples}->{$msample}->{totalAvgDepth} ? sprintf("%.2f",$tigrfam2genes{$tid}->{msamples}->{$msample}->{totalAvgDepth}) : 0;
	    my $sampleAbd_percent = $msample_cds_total_abd != 0  ? sprintf("%.2f", $sampleAbd*100/$msample_cds_total_abd) : 0;
	    push(@tab_fh_l, $sampleAbd);
	    push(@tab_fh_l, $sampleAbd_percent);

	    $datatable_jsonstr .=  (' ' x 2) . "\"depth_$msample\": $sampleAbd,\n";
	    $datatable_jsonstr .=  (' ' x 2) . "\"depth_pct_$msample\": $sampleAbd_percent,\n";
	}
	foreach my $psample (@psamples){
	    my $plevel = exists $tigrfam2genes{$tid}->{psamples}->{$psample}->{total_plevel} ? sprintf("%.2f", $tigrfam2genes{$tid}->{psamples}->{$psample}->{total_plevel}) : 0;
	    $datatable_jsonstr .=  (' ' x 2) . "\"p_$psample\": $plevel,\n";
	    push(@tab_fh_l, $plevel);
	}

	$datatable_jsonstr =~ s/,$//;
	$datatable_jsonstr .=  (' ' x 2) . "},\n";

	push(@tab_fh_l, $desc);
	print $tab_fh join("\t", @tab_fh_l), "\n";

	#$datatable_jsonstr .=  $tid_count < $tid_total ? (' ' x 2) . "},\n" : (' ' x 2) . "}\n";
    }

    $datatable_jsonstr .= (' ' x 1) . "]\n";


    print $datatable_fh $datatable_jsonstr;

    close($datatable_fh);
    close($tab_fh);
    output_tigrfam_tablecols("$datadir/cds.tigrfam2genes.tablecol.json");
}
sub output_tigrfam_tablecols{
    my ($outFile) = @_;

    msg("Writing to $outFile");
    open my $tablecol_fh, '>', "$outFile";
    print $tablecol_fh "tablecol = [\n";
    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"Accession\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"Accession\",\n";
    print $tablecol_fh (' ' x 2), "\"render\": function(data,type,full,meta){\n";
    print $tablecol_fh (' ' x 4), "return \'<a href=\"http://tigrfams.jcvi.org/cgi-bin/HmmReportPage.cgi?acc=\' + data + \'\">\' + data + \'</a>\';\n";
    print $tablecol_fh (' ' x 2), "}\n";
    print $tablecol_fh "},\n";

    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"Name\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"Name\"\n";
    print $tablecol_fh "},\n";
    #print $tablecol_fh "{\n";
    #print $tablecol_fh (' ' x 2), "\"title\": \"Isology\",\n";
    #print $tablecol_fh (' ' x 2), "\"data\": \"Isology\"\n";
    #print $tablecol_fh "},\n";
    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"Mainrole\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"Mainrole\"\n";
    print $tablecol_fh "},\n";
    #print $tablecol_fh "{\n";
    #print $tablecol_fh (' ' x 2), "\"title\": \"Subrole\",\n";
    #print $tablecol_fh (' ' x 2), "\"data\": \"Subrole\"\n";
    #print $tablecol_fh "},\n";
    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"Function\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"Function\"\n";
    print $tablecol_fh "},\n";
    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"Count\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"Count\"\n";
    print $tablecol_fh "},\n";
    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"Count%\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"Count_pct\"\n";
    #print $tablecol_fh "},\n";

    #print $tablecol_fh "},\n";
    #print $tablecol_fh "{\n";
    #print $tablecol_fh (' ' x 2), "\"title\": \"Total Proteoin Expressed\",\n";
    #print $tablecol_fh (' ' x 2), "\"data\": \"p_total_expressed\"\n";
    if(@msamples || @psamples){
	print $tablecol_fh "},\n";

	if(@msamples){
	    #print $tablecol_fh "{\n";
	    #print $tablecol_fh (' ' x 2), "\"title\": \"A\",\n";
	    #print $tablecol_fh (' ' x 2), "\"data\": \"Abundance\"\n";
	    #print $tablecol_fh "},\n";
	    print $tablecol_fh "{\n";
	    print $tablecol_fh (' ' x 2), "\"title\": \"A%\",\n";
	    print $tablecol_fh (' ' x 2), "\"data\": \"Abundance_pct\"\n";
	    print $tablecol_fh "},\n";
	    for my $i (0 .. $#msamples){
		print $tablecol_fh "{\n";
		print $tablecol_fh (' ' x 2),"\"title\": \"$msamples[$i]%\",\n";
		print $tablecol_fh (' ' x 2),"\"data\": \"depth_pct\_$msamples[$i]\"\n";

		if($i < $#msamples){
		    print $tablecol_fh "},\n";
		}

	    }
	}
	if(@psamples){

	    print $tablecol_fh "},\n";

	    foreach my $i (0 .. $#psamples){
		print $tablecol_fh "{\n";
		print $tablecol_fh (' ' x 2),"\"title\": \"$psamples[$i]%\",\n";
		print $tablecol_fh (' ' x 2),"\"data\": \"p\_$psamples[$i]\"\n";
		if($i < $#psamples){
		    print $tablecol_fh "},\n";
		}
	    }
	}
	print $tablecol_fh "}\n";
    }
    else{
	print $tablecol_fh "}\n";
    }
    print $tablecol_fh "];\n";
    close($tablecol_fh);

}

sub output_cds2sprot_annot{

    my ($seqHash, $datadir) = @_;


    open TAB, ">$datadir/cds.gene2sprot.tab.txt";
    open JSON, ">$datadir/cds.gene2sprot.datatable.json";

    my @header = ("Gene", "SP", "TM", "Start", "End", "Length", "Strand", "Contig", "Source", "sprot_desc", "Taxonomy");


    print TAB "#", join("\t", @header), "\n";;
    my $datatable_str = "{\n";
    $datatable_str .= ' ' x 1;
    $datatable_str .= "\"data\": [\n";


    for my $sid (sort {$seqHash{$b}{DNA}->length <=> $seqHash{$a}{DNA}->length} keys %$seqHash){
	next if not exists $seqHash->{$sid}{FEATURE};
	for my $f ( sort { $a->start <=> $b->start } @{ $seqHash->{$sid}{FEATURE} }) {

	    next if $f->primary_tag ne "CDS";
	    next if !$f->has_tag("sprot_desc");
	    my $source = $f->source_tag;
	    my $start = $f->start;
	    my $end = $f->end;
	    my $len = $end - $start + 1;
	    my $strand = $f->strand;
	    my $seqid = $f->seq_id;
	    my $id = ($f->get_tag_values("ID"))[0];
	    my $sp = $f->has_tag("sp") ?  ($f->get_tag_values("sp"))[0] : "No";
	    my $tm = $f->has_tag("tm_num") ?  ($f->get_tag_values("tm_num"))[0] : "0";
	    my $oc = $f->has_tag("genomedb_OC") ? ($f->get_tag_values("genomedb_OC"))[0] : "unknow";

	    my $taxon = "unknow";
	    if($f->has_tag("genomedb_OC")){
		my $value = ($f->get_tag_values("genomedb_OC"))[0];
		#($taxon) = $value =~ /(^[^;]*;[^;]*)/;
		$taxon = $value;
	    }

	    $datatable_str .= (' ' x 2) . "{\n";
	    $datatable_str .= (' ' x 2) . "\"seqname\": \"$seqid\",\n";
	    $datatable_str .= (' ' x 2) . "\"feature\": \"CDS\",\n";
	    $datatable_str .= (' ' x 2) . "\"source\": \"$source\",\n";
	    $datatable_str .= (' ' x 2) . "\"start\": \"$start\",\n";
	    $datatable_str .= (' ' x 2) . "\"end\": \"$end\",\n";
	    $datatable_str .= (' ' x 2) . "\"len\": \"$len\",\n";
	    $datatable_str .= (' ' x 2) . "\"strand\": \"$strand\",\n";
	    $datatable_str .= (' ' x 2) . "\"ID\": \"$id\",\n";
	    $datatable_str .= (' ' x 2) . "\"sp\": \"$sp\",\n";
	    $datatable_str .= (' ' x 2) . "\"tm\": \"$tm\",\n";
	    $datatable_str .= (' ' x 2) . "\"genomedb_OC\": \"$oc\",\n";
	    my $desc = ($f->get_tag_values("sprot_desc"))[0];
	    my $target = ($f->get_tag_values("sprot_target"))[0];
	    my @row = ($id, $sp, $tm, $start, $end, $len, $strand, $seqid, $source, $desc, $taxon);

	    print TAB join("\t", @row), "\n";
	    $datatable_str .= (' ' x 2) . "\"sprot_desc\": \"$desc\",\n";
	    $datatable_str .= (' ' x 2) . "\"taxon\": \"$taxon\"\n";
	    $datatable_str .=(' ' x 2) . "},\n";

	}
    }
    $datatable_str =~ s/,$//;
    $datatable_str .= (' ' x 1) . "]\n";
    $datatable_str .= "}\n";
    print JSON $datatable_str, "\n";
    close(TAB);
    close(JSON);
}

sub output_master_annot_summary{
    my ($seqHash,$datadir) = @_;
# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
# Write it all out!
    msg("Writing tabular format summary output to $datadir/");
    open my $tbl_fh, '>', "$datadir/master.tsv";
    my @tags = ("casgene_acc", "sp", "tm_num", "sprot_desc", "tigrfam_desc", "pfam_desc","genomedb_OC");

    print $tbl_fh "#contigid\t";
    print $tbl_fh "feature_id\t";
    print $tbl_fh "type\t";
    print $tbl_fh "start\t";
    print $tbl_fh "end\t";
    print $tbl_fh "length\t";
    print $tbl_fh "strand\t";
    print $tbl_fh "kegg_pathways\t";
    print $tbl_fh "metacyc_pathways\t";
    print $tbl_fh join("\t", @tags), "\n";

    for my $sid (sort {$seqHash{$b}{DNA}->length <=> $seqHash{$a}{DNA}->length} keys %$seqHash) {
	next if not exists $seqHash->{$sid}{FEATURE};
        for my $f ( sort { $a->start <=> $b->start } @{ $seqHash->{$sid}{FEATURE} }) {
	    next if $f->primary_tag eq "transmembrane_helix";
            next if $f->primary_tag eq "signal_peptide";
	    my $geneid = ($f->get_tag_values("ID"))[0] if $f->has_tag("ID");
	    my @kegg_pathways = ();
	    my @metacyc_pathways = ();
	    if(exists $gene2pathways{$geneid}->{KEGG}){
		push (@kegg_pathways, keys %{$gene2pathways{$geneid}->{KEGG}});
	    }
	    if(exists $gene2pathways{$geneid}->{metacyc}){
		push (@metacyc_pathways, keys %{$gene2pathways{$geneid}->{metacyc}});
	    }
	    print $tbl_fh "$sid\t";
            print $tbl_fh ($f->get_tag_values("ID"))[0], "\t" if $f->has_tag("ID");
            print $tbl_fh $f->primary_tag, "\t";
            print $tbl_fh $f->start, "\t";
            print $tbl_fh $f->end, "\t";
	    print $tbl_fh $f->length, "\t";
            print $tbl_fh $f->strand, "\t";
	    print $tbl_fh join(";", @kegg_pathways), "\t";
	    print $tbl_fh join(";", @metacyc_pathways), "\t";
            foreach my $tag (@tags){
                print $tbl_fh TAG($f, $tag), "\t";
            }
            print $tbl_fh "\n";
        }
    }

    close($tbl_fh);
}

sub output_stats{
    my ($seqHash, $datadir) = @_;
    # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
# Output a general .txt file with statistics about the annotation

    msg("Generating annotation statistics file");
    my @contig_lens = map {$seqHash{$_}{DNA}->length } keys %$seqHash;
    my @sorted_lens = sort { $a <=> $b} @contig_lens;

    open my $stat_fh, '>', "$datadir/master.stats.txt";
    print $stat_fh "##############input contig stats#############\n\n";
    print $stat_fh "Contig count: ", scalar(@contig_lens), "\n";
    print $stat_fh "Contig total bases: ", sum(@contig_lens), "\n";
    print $stat_fh "Contig min length: ", $sorted_lens[0], "\n";
    print $stat_fh "Contig max length: ", $sorted_lens[$#sorted_lens], "\n";
    print $stat_fh "Contig mean length: ", mean(\@contig_lens), "\n";
    print $stat_fh "Contig meadian length: ", median(\@contig_lens), "\n";
    print $stat_fh "Contig length stdev: ", stdev(\@contig_lens), "\n";
    print $stat_fh "Contig N50: ", get_N50(\@contig_lens), "\n";

    

    my %count;
    for my $sid (sort {$seqHash{$b}{DNA}->length <=> $seqHash{$a}{DNA}->length} keys %$seqHash) {
	next if not exists $seqHash->{$sid}{FEATURE};
        for my $f (@{ $seqHash{$sid}{FEATURE} }) {
	    $count{ $f->primary_tag}->{count}++;
	    $count{$f->primary_tag}->{foam}++ if $f->has_tag('foam_kos');
            $count{$f->primary_tag}->{tigrfam}++ if $f->has_tag('tigrfam_desc');
            $count{$f->primary_tag}->{pfam}++ if $f->has_tag('pfam_desc');
            $count{$f->primary_tag}->{sprot}++ if $f->has_tag('sprot_desc');
            $count{$f->primary_tag}->{genomedb}++ if $f->has_tag('genomedb_OC');
            $count{$f->primary_tag}->{metabolic}++ if $f->has_tag('metabolic_process');
	    $count{$f->primary_tag}->{rRNA_taxon}++ if $f->has_tag('rRNA_taxon');
        }
    }

    my $gene_predict_str = "";
    my $gene_annot_str = "";
    
    for my $ft (sort keys %count) {
	#print $stat_fh "$ft count:\t", $count{$ft}->{count}, "\n";
	$gene_predict_str .= "$ft count:\t". $count{$ft}->{count}. "\n";
	
	if($ft eq "CDS"){
	    $gene_annot_str .= (not exists $count{$ft}->{sprot}) ? "$ft swissprot_hit:\t0\n"  :  "$ft swissprot_hit:\t" . $count{$ft}->{sprot} . "\n";
	    $gene_annot_str .= (not exists $count{$ft}->{pfam}) ? "$ft pfam_hit:\t0\n"  :  "$ft pfam_hit:\t" . $count{$ft}->{pfam} . "\n";
	    $gene_annot_str .= (not exists $count{$ft}->{tigrfam}) ? "$ft tigrfam_hit:\t0\n"  :  "$ft tigrfam_hit:\t" . $count{$ft}->{tigrfam} . "\n";
	    $gene_annot_str .= (not exists $count{$ft}->{foam}) ? "$ft foam_hit:\t0\n"  :  "$ft foam_hit:\t" . $count{$ft}->{foam} . "\n";
	    $gene_annot_str .= (not exists $count{$ft}->{metabolic}) ? "$ft metabolic_marker_hit:\t0\n"  :  "$ft metabolic_marker_hit:\t" . $count{$ft}->{metabolic} . "\n";
	    $gene_annot_str .= (not exists $count{$ft}->{genomedb}) ? "$ft genomedb_hit:\t0\n"  :  "$ft genomedb_hit:\t" . $count{$ft}->{genomedb} . "\n";
	}
	elsif($ft =~ /SrRNA/){
	    $gene_annot_str .= (exists $count{$ft}->{rRNA_taxon}) ?  "$ft SILVA database search hits:\t" . $count{$ft}->{rRNA_taxon} . "\n" : "$ft silva database searching hits:\t0\n";
	}
	
    }
    print $stat_fh "##############gene prediction stats#############\n";
    print $stat_fh $gene_predict_str;
    print $stat_fh "##############gene annotation stats#############\n";
    print $stat_fh $gene_annot_str;
    close($stat_fh);

}

sub TAG {
    my($f, $tag) = @_;
    return "" unless $f->has_tag($tag);

    my (@values) = ($f->has_tag($tag)) ? $f->get_tag_values($tag) : ("");
    for (@values){
        s/,/%2C/g;
    }
    my $value = join(",", @values);

#$value =~ s/^\s+(\S.*?)\s+$/$1/;

    return $value;
}



sub output_fasta{
    my ($seqHash, $cds_aa_seqs, $datadir) = @_;

    my $ffn_fh = Bio::SeqIO->new(-file=>">$datadir/cds.ffn", -format=>'fasta');
    my $faa_fh = Bio::SeqIO->new(-file=>">$datadir/cds.faa", -format=>'fasta');
    my $crispr_fh = Bio::SeqIO->new(-file=>">$datadir/crispr.ffn", -format=>'fasta');
    my $tRNA_fh = Bio::SeqIO->new(-file=>">$datadir/tRNA.ffn", -format=>'fasta');
    my $s5_fh = Bio::SeqIO->new(-file=>">$datadir/5SrRNA.ffn", -format=>'fasta');
    my $s16_fh = Bio::SeqIO->new(-file=>">$datadir/16SrRNA.ffn", -format=>'fasta');
    my $s18_fh = Bio::SeqIO->new(-file=>">$datadir/18SrRNA.ffn", -format=>'fasta');
    my $s23_fh = Bio::SeqIO->new(-file=>">$datadir/23SrRNA.ffn", -format=>'fasta');
    my $s28_fh = Bio::SeqIO->new(-file=>">$datadir/28SrRNA.ffn", -format=>'fasta');

    for my $sid (sort {$seqHash{$b}{DNA}->length <=> $seqHash{$a}{DNA}->length} keys %$seqHash) {
        #for my $sid (@seqArray) {

        #my $ctg = $seqHash->{$sid}{DNA};
	next if not exists $seqHash->{$sid}{FEATURE};
        for my $f ( sort { $a->start <=> $b->start } @{ $seqHash->{$sid}{FEATURE}}) {
	    
            next if $f->primary_tag =~ /transmembrane_helix|signal_peptide/;
            my $s = $f->location->start;
	    my $e = $f->location->end;
	    my $cid = TAG($f, 'ID');
	    #msg("feature id=$cid, start=$s, end=$e");
	    my $p = $seqHash{$sid}{DNA}->trunc($f->location);
	    $p->display_id(TAG($f, 'ID') );
            my $start = $f->start;
            my $end = $f->end;
            my $strand = $f->strand;
            my $len = $f->length;
	    my $desc = "";

            if ($f->primary_tag eq 'CDS'){
		if($f->has_tag('sprot_desc')){
		    $desc =  $f->has_tag('sprot_desc') ? TAG($f, 'sprot_desc') : "";
		}
		elsif($f->has_tag('tigrfam_desc')){
		    $desc =  $f->has_tag('tigrfam_desc') ? TAG($f, 'tigrfam_desc') : "";
		}
		elsif($f->has_tag('pfam_desc')){
		    $desc =  $f->has_tag('pfam_desc') ? TAG($f, 'pfam_desc') : "";
		}
		else{
		    $desc = "hypothetical protein";
		}

		my $lineage = $f->has_tag('genomedb_OC') ? TAG($f, 'genomedb_OC') : "";
		my $os = "UNKNOWN";

		if($lineage ne ""){
		    my @a = split(/;/, $lineage);
		    $os = $a[-1];
		    $os =~ s/\s+/_/g;
		}
		$desc .= " OS=$os";


		$p->desc("$desc len=$len") if defined $p;
                $ffn_fh->write_seq($p);

		my $aa_seq = $cds_aa_seqs->{TAG($f, 'ID')};
		$aa_seq->desc("$desc len=" . $aa_seq->length);

		$faa_fh->write_seq($aa_seq);
            }
            if ($f->primary_tag =~ /repeat_region/) {
                $crispr_fh->write_seq($p);
            }
            if ($f->primary_tag =~ /tRNA/) {
                $desc .= "/name=" . TAG($f, "Name");
		$p->desc($desc);
                $tRNA_fh->write_seq($p);
            }

            if ($f->primary_tag =~ /18SrRNA/) {
                $desc .= " \/Name=";
                $desc .=  $f->has_tag('Name') ? TAG($f, 'Name') : "";
                $desc .= " \/rRNA_taxon=";
                $desc .=  $f->has_tag('rRNA_taxon') ? TAG($f, 'rRNA_taxon') : "";
                $p->desc($desc);
                $s18_fh->write_seq($p);
            }
            if ($f->primary_tag =~ /16SrRNA/) {
                $desc .= " \/Name=";
                $desc .=  $f->has_tag('Name') ? TAG($f, 'Name') : "";
                $desc .= " \/rRNA_taxon=";
                $desc .=  $f->has_tag('rRNA_taxon') ? TAG($f, 'rRNA_taxon') : "";
                $p->desc($desc);
                $s16_fh->write_seq($p);
            }

            if ($f->primary_tag =~ /23SrRNA/) {
                $desc .= " \/Name=";
                $desc .=  $f->has_tag('Name') ? TAG($f, 'Name') : "";
                $desc .= " \/rRNA_taxon=";
                $desc .=  $f->has_tag('rRNA_taxon') ? TAG($f, 'rRNA_taxon') : "";
                $p->desc($desc);
                $s23_fh->write_seq($p);
            }
	    if ($f->primary_tag =~ /28SrRNA/) {
                $desc .= " \/Name=";
                $desc .=  $f->has_tag('Name') ? TAG($f, 'Name') : "";
                $desc .= " \/rRNA_taxon=";
                $desc .=  $f->has_tag('rRNA_taxon') ? TAG($f, 'rRNA_taxon') : "";
                $p->desc($desc);
                $s28_fh->write_seq($p);
            }
            if ($f->primary_tag =~ /5SrRNA|5\.8SrRNA/) {
                $desc .= " \/Name=";
                $desc .=  $f->has_tag('Name') ? TAG($f, 'Name') : "";
                $desc .= " \/rRNA_taxon=";
                $desc .=  $f->has_tag('rRNA_taxon') ? TAG($f, 'rRNA_taxon') : "";
                $p->desc($desc);
                $s5_fh->write_seq($p);
            }

        }

    }

}

#use , to seperate multiple values, so, comma were escaped using %2C
sub output_tbl{
    my ($seqHash,$datadir) = @_;

    # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
    # Write it all out!

    msg("Writing tbl output to $datadir/");
    open my $tbl_fh, '>', "$datadir/master.tbl";
    for my $sid (sort {$seqHash{$b}{DNA}->length <=> $seqHash{$a}{DNA}->length} keys %$seqHash){

	print $tbl_fh ">Feature $sid\n";
	next if not exists $seqHash->{$sid}{FEATURE};
	for my $f ( sort { $a->start <=> $b->start } @{ $seqHash->{$sid}{FEATURE} }) {

	    #for my $fid ( sort {$seqHash->{$sid}{$a}->start <=> $seqHash->{$sid}{$b}->start} keys %{$seqHash->{$sid}}){
	    #my $f = $seqHash->{$sid}{$fid};

	    my ($L,$R) = ($f->strand >= 0) ? ($f->start,$f->end) : ($f->end,$f->start);
	    print {$tbl_fh} "$L\t$R\t",$f->primary_tag, "\n";
	    print {$tbl_fh} "\t\t\tID\t", ($f->get_tag_values("ID"))[0], "\n" if $f->has_tag("ID");

	    foreach my  $ftag ($f->all_tags()){
		if($ftag ne "ID" && $ftag ne "score" && $ftag ne "samplePlevel" && $ftag ne "sampleDepth"){

		    print {$tbl_fh} "\t\t\t$ftag";

		    foreach my $value ($f->get_tag_values($ftag)){
			$value ||= "";
			print {$tbl_fh} "\t$value;";
		    }
		    print {$tbl_fh} "\n";
		}
	    }

	}
    }

}




sub output_taxon_tablecols{

    my ($outFile) = @_;
    msg("Writing to $outFile");
    open my $tablecol_fh, '>', "$outFile";
    print $tablecol_fh "tablecol = [\n";
    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"Taxon\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"Name\"\n";
    print $tablecol_fh "},\n";

    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"Count\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"Count\"\n";
    print $tablecol_fh "},\n";

    print $tablecol_fh "{\n";
    print $tablecol_fh (' ' x 2), "\"title\": \"Count%\",\n";
    print $tablecol_fh (' ' x 2), "\"data\": \"Count_pct\"\n";


    if(@msamples){
	print $tablecol_fh "},\n";

	print $tablecol_fh "{\n";
	    print $tablecol_fh (' ' x 2), "\"title\": \"A\",\n";
	    print $tablecol_fh (' ' x 2), "\"data\": \"Abundance\"\n";
	    print $tablecol_fh "},\n";

	    print $tablecol_fh "{\n";
	    print $tablecol_fh (' ' x 2), "\"title\": \"A%\",\n";
	    print $tablecol_fh (' ' x 2), "\"data\": \"Abundance_pct\"\n";
	    print $tablecol_fh "},\n";



	for my $i (0 .. $#msamples){
	    print $tablecol_fh "{\n";
	    print $tablecol_fh (' ' x 2),"\"title\": \"$msamples[$i]%\",\n";
	    print $tablecol_fh (' ' x 2),"\"data\": \"depth_pct\_$msamples[$i]\"\n";

	    if($i == $#msamples){
		print $tablecol_fh "}\n";
	    }
	    else{
		print $tablecol_fh "},\n";
	    }
	}
    }
    else{
	print $tablecol_fh "}\n";
    }
    print $tablecol_fh "];\n";
    close($tablecol_fh);
}

sub output_taxon_treecol{

    my ($outFile) = @_;
    msg("Writing to $outFile");
    open (TREECOL,">$outFile")or die "Could not open $outFile to write, $!\n";

     my %treecol = ();
    $treecol{"count"} = "Count";
    $treecol{"count_pct"} = "Count%";
    my @colkeys = ("count","count_pct");

    if(scalar (@msamples)){
	$treecol{"abundance"} = "A";
	$treecol{"abundance_pct"} = "A%";
	push(@colkeys, "abundance");
	push(@colkeys, "abundance_pct");
    }

    push(@colkeys, map{"depth_pct_$_"} @msamples);


    foreach my $msample (@msamples){
	$treecol{"depth_pct_$msample"} = "$msample%";
    }

    print TREECOL "treecol = [\n";
    print TREECOL "{\nheader: \"Taxonomy\"\n},\n";

    my $size = @colkeys;

    my $i = 0;
    for (; $i < $size; $i++){
	my $key = $colkeys[$i];
	if($i == $size -1){
	    print TREECOL "{width: \"100px\", value: \"$key\", header: \"$treecol{$key}\"}\n" if exists $treecol{$key};
	}
	else{
	    print TREECOL "{value: \"$key\", header: \"$treecol{$key}\"},\n" if exists $treecol{$key};
	}

    }

    print TREECOL "];\n";
    close(TREECOL);

}







sub uniq {
    my %seen;
    grep !$seen{$_}++, @_;
}
